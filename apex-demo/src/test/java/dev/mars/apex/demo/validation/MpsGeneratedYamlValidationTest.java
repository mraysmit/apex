/**
 * MPS-generated YAML Validation Test
 *
 * What it does:
 * - Scans the apex-demo/demo-data/mps-generated folder for all *.yaml/*.yml files.
 * - Tries to load each file using the standard YamlConfigurationLoader used by the engine.
 * - Fails the test if any file cannot be loaded or is missing required sections.
 * - If the folder is missing or empty, the test exits early (effectively a skip) and prints a note.
 *
 * Why this exists:
 * - Lets you author higher-level models in JetBrains MPS and generate YAML that is guaranteed to be
 *   compatible with the APEX engine by validating them in CI just like hand-written configs.
 */
package dev.mars.apex.demo.validation;

import dev.mars.apex.core.config.yaml.YamlConfigurationLoader;
import dev.mars.apex.core.config.yaml.YamlRuleConfiguration;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

import java.io.IOException;
import java.nio.file.*;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import static org.junit.jupiter.api.Assertions.*;

class MpsGeneratedYamlValidationTest {

    private static final Path GENERATED_DIR = Paths.get("demo-data", "mps-generated");

    @Test
    @DisplayName("Validate all MPS-generated YAML files (if any)")
    void validateMpsGeneratedYamlFiles() throws IOException {
        if (!Files.exists(GENERATED_DIR) || !Files.isDirectory(GENERATED_DIR)) {
            System.out.println("[MPS YAML Validation] Directory not found: " + GENERATED_DIR.toAbsolutePath() + " — skipping.");
            return; // pass silently
        }

        List<Path> yamlFiles;
        try (Stream<Path> stream = Files.walk(GENERATED_DIR)) {
            yamlFiles = stream
                    .filter(Files::isRegularFile)
                    .filter(p -> {
                        String name = p.getFileName().toString().toLowerCase();
                        return name.endsWith(".yaml") || name.endsWith(".yml");
                    })
                    .collect(Collectors.toList());
        }

        if (yamlFiles.isEmpty()) {
            System.out.println("[MPS YAML Validation] No YAML files found in: " + GENERATED_DIR.toAbsolutePath() + " — skipping.");
            return; // pass silently
        }

        System.out.println("[MPS YAML Validation] Validating " + yamlFiles.size() + " file(s) in " + GENERATED_DIR.toAbsolutePath());

        YamlConfigurationLoader loader = new YamlConfigurationLoader();

        for (Path yamlFile : yamlFiles) {
            try {
                String pathForLoader = yamlFile.toString().replace('\\', '/');
                System.out.println("[MPS YAML Validation] Loading: " + pathForLoader);
                YamlRuleConfiguration cfg = loader.loadFromFile(pathForLoader);
                assertNotNull(cfg, () -> "Configuration should not be null for " + yamlFile);
                assertNotNull(cfg.getMetadata(), () -> "Metadata is required: " + yamlFile);
                assertNotNull(cfg.getRules(), () -> "Rules section is required: " + yamlFile);
            } catch (Exception e) {
                fail("Failed to load YAML generated by MPS: " + yamlFile + "\nReason: " + e.getMessage());
            }
        }
    }
}
