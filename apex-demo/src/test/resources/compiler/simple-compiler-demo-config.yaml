# ============================================================================
# APEX YAML Configuration File
# ============================================================================
# Used by: SimpleCompilerDemoTest.java (testStaticAnalysis, testExpressionValidation, testCodeGeneration methods)
# Purpose: APEX-compliant compiler demo configuration demonstrating static analysis,
#          expression validation, and code generation with real business logic
#          for testing APEX compilation and validation capabilities
# ============================================================================

name: "Simple Compiler Demo Configuration"
description: "APEX-compliant simple compiler demo processing with real business logic"
version: "1.0"

enrichments:
  - id: "static-analysis"
    name: "static-analysis"
    type: "calculation-enrichment"
    description: "Perform static analysis of YAML configuration with comprehensive issue detection and validation"
    condition: "#analysisType != null && #analysisScope != null"
    calculation-config:
      expression: "'Static Analysis: ' + #analysisType + ' with scope ' + #analysisScope + ' (Analyzed: ' + T(java.time.LocalDateTime).now().toString() + ')'"
      result-field: "staticAnalysisResult"
    field-mappings:
      - source-field: "staticAnalysisResult"
        target-field: "staticAnalysisResult"

  - id: "expression-validation"
    name: "expression-validation"
    type: "calculation-enrichment"
    description: "Validate SpEL expressions with optimization detection and performance analysis"
    condition: "#validationType != null && #validationScope != null"
    calculation-config:
      expression: "'Expression Validation: ' + #validationType + ' with scope ' + #validationScope + ' (Validated: ' + T(java.time.LocalDateTime).now().toString() + ')'"
      result-field: "expressionValidationResult"
    field-mappings:
      - source-field: "expressionValidationResult"
        target-field: "expressionValidationResult"

  - id: "code-generation"
    name: "code-generation"
    type: "calculation-enrichment"
    description: "Generate Java code with compilation simulation and performance optimization concepts"
    condition: "#generationType != null && #generationScope != null"
    calculation-config:
      expression: "'Code Generation: ' + #generationType + ' with scope ' + #generationScope + ' (Generated: ' + T(java.time.LocalDateTime).now().toString() + ')'"
      result-field: "codeGenerationResult"
    field-mappings:
      - source-field: "codeGenerationResult"
        target-field: "codeGenerationResult"

  - id: "performance-analysis"
    name: "performance-analysis"
    type: "calculation-enrichment"
    description: "Analyze performance optimization opportunities with comprehensive metrics and recommendations"
    condition: "#approach != null"
    calculation-config:
      expression: "'Performance Analysis: Processing completed using ' + #approach + ' (Analysis: ' + T(java.time.LocalDateTime).now().toString() + ')'"
      result-field: "performanceAnalysisResult"
    field-mappings:
      - source-field: "performanceAnalysisResult"
        target-field: "performanceAnalysisResult"
