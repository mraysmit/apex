# APEX Performance Test Contexts Configuration
# External data source configuration for performance test contexts
# Replaces hardcoded Map.of context creation from PerformanceAndExceptionDemo

metadata:
  id: "performance-test-contexts-configuration"
  name: "Performance Test Contexts Configuration"
  version: "1.0.0"
  description: "Data-driven performance test contexts configuration for performance and exception handling processing"
  type: "external-data-config"
  author: "apex.demo.team@company.com"
  created-date: "2024-12-24"
  tags: ["apex-demo", "evaluation", "performance-and-exception", "performance-test-contexts"]

# Performance test contexts configuration by context type
data:
  caching-performance-contexts:
    context-type: "caching-performance-contexts"
    context-name: "Caching Performance Test Contexts"
    description: "Test contexts for caching performance analysis"
    context-characteristics:
      test-category: "CACHING_PERFORMANCE"
      measurement-focus: "CACHE_EFFICIENCY"
      execution-pattern: "REPEATED"
    test-contexts:
      cache-miss-context:
        context-id: "performance-test-contexts-configuration"
        context-name: "Cache Miss Test Context"
        context-description: "Context for testing cache miss performance"
        test-data:
          notional-amount: 5000000.0
          currency: "USD"
          transaction-type: "HIGH_VALUE"
          cache-state: "EMPTY"
        rule-expressions:
          cached-rule: "#notionalAmount > 1000000"
          cache-key: "high-value-notional-check"
          expected-result: true
        performance-expectations:
          execution-time: "BASELINE"
          cache-behavior: "MISS"
          memory-allocation: "HIGH"
          compilation-required: true
        test-parameters:
          iteration-count: 1000
          warmup-iterations: 100
          measurement-precision: "NANOSECOND"
        audit-requirements:
          - "Log cache miss performance"
          - "Track compilation overhead"
          
      cache-hit-context:
        context-id: "performance-test-contexts-configuration"
        context-name: "Cache Hit Test Context"
        context-description: "Context for testing cache hit performance"
        test-data:
          notional-amount: 5000000.0
          currency: "USD"
          transaction-type: "HIGH_VALUE"
          cache-state: "POPULATED"
        rule-expressions:
          cached-rule: "#notionalAmount > 1000000"
          cache-key: "high-value-notional-check"
          expected-result: true
        performance-expectations:
          execution-time: "OPTIMIZED"
          cache-behavior: "HIT"
          memory-allocation: "LOW"
          compilation-required: false
        test-parameters:
          iteration-count: 1000
          warmup-iterations: 0
          measurement-precision: "NANOSECOND"
        audit-requirements:
          - "Log cache hit performance"
          - "Track optimization gains"
          
      cache-warming-context:
        context-id: "performance-test-contexts-configuration"
        context-name: "Cache Warming Test Context"
        context-description: "Context for testing cache warming strategies"
        test-data:
          notional-amount: 5000000.0
          currency: "USD"
          transaction-type: "HIGH_VALUE"
          cache-state: "WARMING"
        rule-expressions:
          cached-rule: "#notionalAmount > 1000000"
          cache-key: "high-value-notional-check"
          expected-result: true
        performance-expectations:
          execution-time: "VARIABLE"
          cache-behavior: "WARMING"
          memory-allocation: "MODERATE"
          compilation-required: "CONDITIONAL"
        test-parameters:
          iteration-count: 500
          warmup-iterations: 50
          measurement-precision: "NANOSECOND"
        audit-requirements:
          - "Log cache warming performance"
          - "Track warming effectiveness"
    context-settings:
      context-caching: false
      performance-monitoring: true
      cache-analysis: true
    
  expression-complexity-contexts:
    context-type: "expression-complexity-contexts"
    context-name: "Expression Complexity Test Contexts"
    description: "Test contexts for expression complexity analysis"
    context-characteristics:
      test-category: "EXPRESSION_COMPLEXITY"
      measurement-focus: "EXECUTION_TIME"
      execution-pattern: "COMPARATIVE"
    test-contexts:
      simple-expression-context:
        context-id: "performance-test-contexts-configuration"
        context-name: "Simple Expression Test Context"
        context-description: "Context for testing simple expression performance"
        test-data:
          amount: 5000000.0
          currency: "USD"
          transaction-type: "SIMPLE"
          complexity-level: "LOW"
        rule-expressions:
          simple-expression: "#amount > 1000000"
          complexity-score: 1
          expected-result: true
        performance-expectations:
          execution-time: "FAST"
          memory-usage: "LOW"
          cpu-utilization: "LOW"
          optimization-potential: "MINIMAL"
        test-parameters:
          iteration-count: 1000
          measurement-precision: "NANOSECOND"
          baseline-test: true
        audit-requirements:
          - "Log simple expression performance"
          - "Establish baseline metrics"
          
      complex-expression-context:
        context-id: "performance-test-contexts-configuration"
        context-name: "Complex Expression Test Context"
        context-description: "Context for testing complex expression performance"
        test-data:
          amount: 5000000.0
          currency: "USD"
          transaction-type: "COMPLEX"
          complexity-level: "HIGH"
        rule-expressions:
          complex-expression: "#amount != null && #amount.compareTo(T(java.math.BigDecimal).new('1000000')) > 0 && #currency == 'USD'"
          complexity-score: 8
          expected-result: true
        performance-expectations:
          execution-time: "SLOWER"
          memory-usage: "HIGHER"
          cpu-utilization: "HIGHER"
          optimization-potential: "SIGNIFICANT"
        test-parameters:
          iteration-count: 1000
          measurement-precision: "NANOSECOND"
          baseline-test: false
        audit-requirements:
          - "Log complex expression performance"
          - "Compare against baseline"
          
      very-complex-expression-context:
        context-id: "performance-test-contexts-configuration"
        context-name: "Very Complex Expression Test Context"
        context-description: "Context for testing very complex expression performance"
        test-data:
          amount: 5000000.0
          currency: "USD"
          transaction-type: "VERY_COMPLEX"
          complexity-level: "VERY_HIGH"
        rule-expressions:
          very-complex-expression: "#amount != null && #amount.compareTo(T(java.math.BigDecimal).new('1000000')) > 0 && #currency == 'USD' && (#amount.scale() <= 2) && T(java.time.LocalDate).now().isAfter(T(java.time.LocalDate).of(2020, 1, 1))"
          complexity-score: 15
          expected-result: true
        performance-expectations:
          execution-time: "MUCH_SLOWER"
          memory-usage: "MUCH_HIGHER"
          cpu-utilization: "MUCH_HIGHER"
          optimization-potential: "CRITICAL"
        test-parameters:
          iteration-count: 500
          measurement-precision: "NANOSECOND"
          baseline-test: false
        audit-requirements:
          - "Log very complex expression performance"
          - "Analyze optimization opportunities"
    context-settings:
      context-caching: true
      performance-monitoring: true
      complexity-analysis: true
    
  exception-handling-contexts:
    context-type: "exception-handling-contexts"
    context-name: "Exception Handling Test Contexts"
    description: "Test contexts for exception handling scenarios"
    context-characteristics:
      test-category: "EXCEPTION_HANDLING"
      measurement-focus: "ERROR_RECOVERY"
      execution-pattern: "ERROR_PRONE"
    test-contexts:
      invalid-expression-context:
        context-id: "performance-test-contexts-configuration"
        context-name: "Invalid Expression Test Context"
        context-description: "Context for testing invalid expression handling"
        test-data:
          amount: 1000000.0
          currency: "USD"
          transaction-type: "ERROR_TEST"
          error-category: "SYNTAX_ERROR"
        rule-expressions:
          invalid-syntax: "#amount >"
          invalid-method: "#amount.invalidMethod()"
          invalid-operator: "#amount ++ 1000000"
          null-comparison: "#amount.compareTo(null)"
        performance-expectations:
          execution-time: "VARIABLE"
          error-rate: "HIGH"
          recovery-time: "FAST"
          memory-impact: "CONTROLLED"
        test-parameters:
          iteration-count: 100
          error-tolerance: "EXPECTED"
          recovery-testing: true
        audit-requirements:
          - "Log exception handling performance"
          - "Track error recovery patterns"
          
      null-pointer-context:
        context-id: "performance-test-contexts-configuration"
        context-name: "Null Pointer Test Context"
        context-description: "Context for testing null pointer exception handling"
        test-data:
          amount: null
          currency: null
          transaction-type: "NULL_TEST"
          error-category: "NULL_POINTER"
        rule-expressions:
          null-amount-check: "#amount > 1000000"
          null-currency-check: "#currency == 'USD'"
          null-method-call: "#amount.toString()"
          safe-null-check: "#amount != null && #amount > 1000000"
        performance-expectations:
          execution-time: "VARIABLE"
          error-rate: "MODERATE"
          recovery-time: "FAST"
          memory-impact: "LOW"
        test-parameters:
          iteration-count: 100
          error-tolerance: "EXPECTED"
          null-safety-testing: true
        audit-requirements:
          - "Log null pointer handling"
          - "Track null safety patterns"
    context-settings:
      context-caching: false
      performance-monitoring: true
      exception-analysis: true
    
  concurrent-execution-contexts:
    context-type: "concurrent-execution-contexts"
    context-name: "Concurrent Execution Test Contexts"
    description: "Test contexts for concurrent execution scenarios"
    context-characteristics:
      test-category: "CONCURRENT_EXECUTION"
      measurement-focus: "THROUGHPUT"
      execution-pattern: "PARALLEL"
    test-contexts:
      single-thread-baseline-context:
        context-id: "performance-test-contexts-configuration"
        context-name: "Single Thread Baseline Context"
        context-description: "Baseline context for single-threaded execution"
        test-data:
          amount: 5000000.0
          currency: "USD"
          transaction-type: "BASELINE"
          thread-count: 1
        rule-expressions:
          baseline-rule: "#amount > 1000000"
          thread-safety: "NOT_REQUIRED"
          expected-result: true
        performance-expectations:
          execution-time: "BASELINE"
          throughput: "BASELINE"
          contention: "NONE"
          scalability: "LINEAR"
        test-parameters:
          iteration-count: 1000
          thread-count: 1
          measurement-precision: "NANOSECOND"
        audit-requirements:
          - "Log single-thread baseline"
          - "Establish throughput baseline"
          
      multi-thread-context:
        context-id: "performance-test-contexts-configuration"
        context-name: "Multi-Thread Test Context"
        context-description: "Context for multi-threaded execution testing"
        test-data:
          amount: 5000000.0
          currency: "USD"
          transaction-type: "CONCURRENT"
          thread-count: 4
        rule-expressions:
          concurrent-rule: "#amount > 1000000"
          thread-safety: "REQUIRED"
          expected-result: true
        performance-expectations:
          execution-time: "IMPROVED"
          throughput: "HIGHER"
          contention: "LOW"
          scalability: "NEAR_LINEAR"
        test-parameters:
          iteration-count: 1000
          thread-count: 4
          measurement-precision: "NANOSECOND"
        audit-requirements:
          - "Log multi-thread performance"
          - "Compare against baseline"
          
      high-concurrency-context:
        context-id: "performance-test-contexts-configuration"
        context-name: "High Concurrency Test Context"
        context-description: "Context for high concurrency stress testing"
        test-data:
          amount: 5000000.0
          currency: "USD"
          transaction-type: "STRESS_TEST"
          thread-count: 16
        rule-expressions:
          stress-rule: "#amount > 1000000"
          thread-safety: "CRITICAL"
          expected-result: true
        performance-expectations:
          execution-time: "VARIABLE"
          throughput: "MAXIMUM"
          contention: "MODERATE"
          scalability: "SUB_LINEAR"
        test-parameters:
          iteration-count: 2000
          thread-count: 16
          measurement-precision: "NANOSECOND"
        audit-requirements:
          - "Log high concurrency performance"
          - "Analyze contention patterns"
    context-settings:
      context-caching: true
      performance-monitoring: true
      concurrency-analysis: true
    
  default:
    context-type: "default"
    context-name: "Default Performance Test Contexts"
    description: "Default performance test context processing"
    test-contexts:
      default-context:
        context-id: "performance-test-contexts-configuration"
        context-name: "Default Context"
        test-data:
          amount: 1000000.0
          currency: "USD"
    context-settings:
      context-caching: true

# Context generation patterns
generation-patterns:
  performance-category-pattern:
    pattern-name: "Performance Category Pattern"
    description: "Generate contexts based on performance categories"
    performance-categories: ["CACHING", "COMPLEXITY", "CONCURRENCY", "EXCEPTION_HANDLING"]
    
  complexity-level-pattern:
    pattern-name: "Complexity Level Pattern"
    description: "Generate contexts based on complexity levels"
    complexity-levels: ["SIMPLE", "MODERATE", "COMPLEX", "VERY_COMPLEX"]
    
  concurrency-level-pattern:
    pattern-name: "Concurrency Level Pattern"
    description: "Generate contexts based on concurrency levels"
    concurrency-levels: ["SINGLE_THREAD", "MULTI_THREAD", "HIGH_CONCURRENCY", "STRESS_TEST"]

# Quality assurance
quality-assurance:
  context-accuracy:
    - "Performance test contexts must be realistic"
    - "Test data must be consistent"
    - "Rule expressions must be valid"
    - "Performance expectations must be achievable"
    
  measurement-reliability:
    - "Performance measurements must be repeatable"
    - "Test contexts must be isolated"
    - "Timing precision must be appropriate"
    - "Resource usage must be monitored"
    
  testing-requirements:
    - "Context generation must be efficient"
    - "Test execution must be deterministic"
    - "Performance monitoring must be accurate"
    - "Exception handling must be comprehensive"
