# ============================================================================
# APEX YAML Configuration File
# ============================================================================
# Used by: ORPHANED - No Java test currently uses this file
# Purpose: Regulatory reporting pipeline demonstration for financial services
#          compliance reporting with trade reporting, risk calculations, and
#          regulatory data validation using APEX pipeline functionality
# Status: Available for integration with regulatory reporting pipeline tests
# ============================================================================

metadata:
  id: "regulatory-reporting-pipeline"
  name: "Regulatory Reporting ETL Pipeline"
  version: "1.0.0"
  description: "Complete ETL pipeline for regulatory reporting with data extraction, transformation, validation, and submission"
  type: "pipeline"
  author: "apex-business-tests"
  business-domain: "Regulatory Compliance"
  tags: ["regulatory-reporting", "etl-pipeline", "compliance", "data-processing"]

# Real ETL pipeline for regulatory reporting
pipeline:
  name: "regulatory-reporting-etl"
  description: "Extract trade data, transform for regulatory format, validate compliance, and submit reports"

  # Pipeline execution steps
  steps:
    # Step 1: Extract trade data from multiple sources
    - name: "extract-trade-data"
      type: "extract"
      source: "trade-database"
      operation: "getAllTradesToday"
      description: "Extract all trades executed today for regulatory reporting"
      
    - name: "extract-position-data"
      type: "extract"
      source: "position-database"
      operation: "getCurrentPositions"
      description: "Extract current position data for risk reporting"
      
    # Step 2: Data quality validation
    - name: "validate-trade-data"
      type: "transform"
      description: "Validate trade data quality and completeness"
      depends-on: ["extract-trade-data"]
      transformations:
        - name: "validate-required-fields"
          type: "validation"
          rule: "trade-data-completeness"
          fields: ["tradeId", "counterpartyId", "instrumentId", "quantity", "price", "tradeDate"]
        - name: "validate-data-types"
          type: "validation"
          rule: "data-type-validation"
          fields: ["quantity", "price", "tradeDate"]
        - name: "validate-business-rules"
          type: "validation"
          rule: "trade-business-rules"
          conditions: ["quantity > 0", "price > 0", "tradeDate <= TODAY"]

    # Step 3: Regulatory format transformation
    - name: "transform-to-regulatory-format"
      type: "transform"
      description: "Transform trade data to regulatory reporting format (MiFID II)"
      depends-on: ["validate-trade-data"]
      transformations:
        - name: "map-to-mifid-fields"
          type: "field-mapping"
          mappings:
            - source: "tradeId"
              target: "transaction_reference_number"
            - source: "instrumentId"
              target: "instrument_identification"
            - source: "quantity"
              target: "quantity"
            - source: "price"
              target: "price"
            - source: "tradeDate"
              target: "trading_date_time"
            - source: "counterpartyId"
              target: "investment_firm_covered"
              
        - name: "add-regulatory-fields"
          type: "field-addition"
          fields:
            - name: "reporting_timestamp"
              value: "CURRENT_TIMESTAMP"
            - name: "venue_of_execution"
              expression: "#venue != null ? #venue : 'OTC'"
            - name: "transaction_type"
              expression: "#quantity > 0 ? 'BUY' : 'SELL'"

    # Step 4: Enrich with counterparty data
    - name: "enrich-counterparty-data"
      type: "transform"
      description: "Enrich trades with counterparty information from external source"
      depends-on: ["transform-to-regulatory-format"]
      transformations:
        - name: "lookup-counterparty-lei"
          type: "lookup"
          source: "counterparty-reference-data"
          key-field: "counterpartyId"
          target-fields: ["lei", "jurisdiction", "entity_type"]
          
        - name: "lookup-instrument-details"
          type: "lookup"
          source: "instrument-reference-data"
          key-field: "instrumentId"
          target-fields: ["isin", "instrument_type", "currency"]

    # Step 5: Risk calculations
    - name: "calculate-risk-metrics"
      type: "transform"
      description: "Calculate risk metrics required for regulatory reporting"
      depends-on: ["enrich-counterparty-data"]
      transformations:
        - name: "calculate-notional-value"
          type: "calculation"
          field: "notional_value"
          expression: "#quantity * #price"
          
        - name: "calculate-market-value"
          type: "calculation"
          field: "market_value"
          expression: "#notional_value * #market_price_factor"
          
        - name: "calculate-credit-risk"
          type: "calculation"
          field: "credit_risk_amount"
          expression: "#market_value * #counterparty_risk_weight * 0.08"

    # Step 6: Regulatory validation
    - name: "validate-regulatory-compliance"
      type: "transform"
      description: "Validate data meets regulatory requirements"
      depends-on: ["calculate-risk-metrics"]
      transformations:
        - name: "validate-mifid-completeness"
          type: "validation"
          rule: "mifid-data-completeness"
          required-fields: ["transaction_reference_number", "instrument_identification", "lei"]
          
        - name: "validate-reporting-thresholds"
          type: "validation"
          rule: "reporting-thresholds"
          conditions: ["notional_value >= 1000", "credit_risk_amount is not null"]

    # Step 7: Generate regulatory reports
    - name: "generate-mifid-report"
      type: "load"
      sink: "mifid-reporting-system"
      operation: "submitTransactionReport"
      description: "Submit transaction reports to MiFID II reporting system"
      depends-on: ["validate-regulatory-compliance"]
      
    - name: "generate-risk-report"
      type: "load"
      sink: "risk-reporting-system"
      operation: "submitRiskReport"
      description: "Submit risk reports to regulatory authority"
      depends-on: ["validate-regulatory-compliance"]

    # Step 8: Audit and archival
    - name: "archive-reports"
      type: "load"
      sink: "regulatory-archive"
      operation: "archiveReport"
      description: "Archive regulatory reports for compliance record-keeping"
      depends-on: ["generate-mifid-report", "generate-risk-report"]
      
    - name: "audit-logging"
      type: "audit"
      sink: "audit-log-system"
      operation: "logRegulatorySubmission"
      description: "Log regulatory submission for audit trail"
      depends-on: ["archive-reports"]

  # Pipeline execution configuration
  execution:
    mode: "sequential"
    errorHandling: "stop-on-critical-error"
    maxRetries: 2
    retryDelay: 5000
    timeout: 1800000  # 30 minutes
    
  # Monitoring and alerting
  monitoring:
    enabled: true
    logLevel: "INFO"
    metricsEnabled: true
    performanceTracking: true
    alerting:
      enabled: true
      error-threshold: 5
      latency-threshold: 900000  # 15 minutes
      notification-channels: ["email", "slack"]

# Data sources configuration
data-sources:
  - name: "trade-database"
    type: "database"
    sourceType: "postgresql"
    enabled: true
    description: "Primary trade database"
    connection:
      host: "trade-db.internal"
      port: 5432
      database: "trading_system"
      username: "reporting_user"
      password: "${TRADE_DB_PASSWORD}"
    queries:
      getAllTradesToday: |
        SELECT trade_id, counterparty_id, instrument_id, quantity, price, 
               trade_date, venue, settlement_date, trader_id
        FROM trades 
        WHERE DATE(trade_date) = CURRENT_DATE
        ORDER BY trade_date DESC
        
  - name: "counterparty-reference-data"
    type: "database"
    sourceType: "postgresql"
    enabled: true
    description: "Counterparty reference data"
    connection:
      host: "reference-data.internal"
      port: 5432
      database: "reference_data"
      username: "readonly_user"
      password: "${REF_DB_PASSWORD}"
    queries:
      getCounterpartyById: |
        SELECT counterparty_id, lei, jurisdiction, entity_type, credit_rating
        FROM counterparties 
        WHERE counterparty_id = :counterpartyId

# Data sinks configuration  
data-sinks:
  - name: "mifid-reporting-system"
    type: "rest-api"
    enabled: true
    description: "MiFID II transaction reporting system"
    connection:
      baseUrl: "https://mifid-reporting.regulator.gov"
      authentication:
        type: "oauth2"
        clientId: "${MIFID_CLIENT_ID}"
        clientSecret: "${MIFID_CLIENT_SECRET}"
    operations:
      submitTransactionReport: |
        POST /api/v2/transaction-reports
        Content-Type: application/json
        {
          "transaction_reference_number": ":transaction_reference_number",
          "instrument_identification": ":instrument_identification",
          "quantity": ":quantity",
          "price": ":price",
          "trading_date_time": ":trading_date_time",
          "lei": ":lei"
        }
