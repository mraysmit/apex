# APEX Pricing Rule Engines Configuration
# External data source configuration for pricing rule engines
# Replaces hardcoded pricing rule logic from PricingServiceDemo

metadata:
  name: "Pricing Rule Engines Configuration"
  version: "1.0.0"
  description: "Data-driven pricing rule engines configuration for pricing service"
  type: "external-data-config"
  author: "apex.demo.team@company.com"
  created-date: "2024-12-24"
  tags: ["apex-demo", "evaluation", "pricing-service", "pricing-rule-engines"]

# Pricing rule engines configuration by engine type
data:
  base-price-rule-engines:
    engine-type: "base-price-rule-engines"
    engine-name: "Base Price Rule Engines"
    description: "Rule engines for base price validation and processing"
    engine-characteristics:
      rule-category: "BASE_PRICE"
      execution-model: "SEQUENTIAL"
      validation-focus: "INPUT_VALIDATION"
    rule-engines:
      base-price-validation-engine:
        engine-id: "BASE_PRICE_VALIDATION_ENGINE"
        engine-name: "Base Price Validation Engine"
        engine-description: "Engine for validating base price inputs"
        validation-rules:
          - rule-name: "base-price-not-null"
            rule-condition: "#basePrice != null"
            rule-description: "Base price must not be null"
            rule-priority: 1
            rule-severity: "ERROR"
            rule-action: "REJECT"
          - rule-name: "base-price-positive"
            rule-condition: "#basePrice > 0"
            rule-description: "Base price must be positive"
            rule-priority: 1
            rule-severity: "ERROR"
            rule-action: "REJECT"
          - rule-name: "base-price-numeric"
            rule-condition: "T(java.lang.Double).isFinite(#basePrice)"
            rule-description: "Base price must be a finite number"
            rule-priority: 1
            rule-severity: "ERROR"
            rule-action: "REJECT"
          - rule-name: "base-price-reasonable-range"
            rule-condition: "#basePrice <= 1000000"
            rule-description: "Base price must be within reasonable range (â‰¤ $1M)"
            rule-priority: 2
            rule-severity: "WARNING"
            rule-action: "FLAG"
        engine-outcomes:
          success-outcome: "BASE_PRICE_VALID"
          failure-outcome: "BASE_PRICE_INVALID"
        audit-requirements:
          - "Log base price validation results"
          - "Track validation failure patterns"
          
      base-price-normalization-engine:
        engine-id: "BASE_PRICE_NORMALIZATION_ENGINE"
        engine-name: "Base Price Normalization Engine"
        engine-description: "Engine for normalizing base price values"
        normalization-rules:
          - rule-name: "price-decimal-normalization"
            rule-condition: "true"
            rule-calculation: "T(java.math.BigDecimal).valueOf(#basePrice).setScale(2, T(java.math.RoundingMode).HALF_UP).doubleValue()"
            rule-description: "Normalize price to 2 decimal places"
            rule-priority: 1
            rule-action: "NORMALIZE"
          - rule-name: "price-currency-formatting"
            rule-condition: "true"
            rule-calculation: "T(java.lang.Double).parseDouble(T(java.lang.String).format('%.2f', #basePrice))"
            rule-description: "Format price for currency display"
            rule-priority: 2
            rule-action: "FORMAT"
          - rule-name: "price-rounding-consistency"
            rule-condition: "#basePrice != T(java.lang.Math).round(#basePrice * 100.0) / 100.0"
            rule-calculation: "T(java.lang.Math).round(#basePrice * 100.0) / 100.0"
            rule-description: "Ensure consistent rounding to cents"
            rule-priority: 1
            rule-action: "ROUND"
        engine-outcomes:
          success-outcome: "BASE_PRICE_NORMALIZED"
          failure-outcome: "BASE_PRICE_NORMALIZATION_FAILED"
        audit-requirements:
          - "Log normalization operations"
          - "Track rounding adjustments"
    engine-settings:
      validation-strict: true
      normalization-required: true
      error-handling: "FAIL_FAST"
    
  discount-rule-engines:
    engine-type: "discount-rule-engines"
    engine-name: "Discount Rule Engines"
    description: "Rule engines for discount calculation and application"
    engine-characteristics:
      rule-category: "DISCOUNT"
      execution-model: "CONDITIONAL"
      calculation-focus: "DISCOUNT_APPLICATION"
    rule-engines:
      sale-discount-engine:
        engine-id: "SALE_DISCOUNT_ENGINE"
        engine-name: "Sale Discount Engine"
        engine-description: "Engine for calculating sale discounts"
        discount-rules:
          - rule-name: "sale-discount-eligibility"
            rule-condition: "#pricingType == 'Sale'"
            rule-description: "Item must be marked for sale pricing"
            rule-priority: 1
            rule-action: "VALIDATE"
          - rule-name: "sale-discount-calculation"
            rule-condition: "#pricingType == 'Sale'"
            rule-calculation: "#basePrice * 0.8"
            rule-description: "Apply 20% sale discount"
            rule-priority: 1
            rule-action: "CALCULATE"
          - rule-name: "sale-minimum-price-protection"
            rule-condition: "(#basePrice * 0.8) < 1.0"
            rule-calculation: "T(java.lang.Math).max(#basePrice * 0.8, 1.0)"
            rule-description: "Maintain minimum $1.00 sale price"
            rule-priority: 2
            rule-action: "PROTECT"
          - rule-name: "sale-discount-validation"
            rule-condition: "(#basePrice * 0.8) >= 0.01"
            rule-description: "Sale price must be at least $0.01"
            rule-priority: 1
            rule-action: "VALIDATE"
        engine-outcomes:
          success-outcome: "SALE_DISCOUNT_APPLIED"
          failure-outcome: "SALE_DISCOUNT_FAILED"
        audit-requirements:
          - "Log sale discount applications"
          - "Track minimum price protections"
          
      clearance-discount-engine:
        engine-id: "CLEARANCE_DISCOUNT_ENGINE"
        engine-name: "Clearance Discount Engine"
        engine-description: "Engine for calculating clearance discounts"
        discount-rules:
          - rule-name: "clearance-discount-eligibility"
            rule-condition: "#pricingType == 'Clearance'"
            rule-description: "Item must be marked for clearance pricing"
            rule-priority: 1
            rule-action: "VALIDATE"
          - rule-name: "clearance-discount-calculation"
            rule-condition: "#pricingType == 'Clearance'"
            rule-calculation: "#basePrice * 0.5"
            rule-description: "Apply 50% clearance discount"
            rule-priority: 1
            rule-action: "CALCULATE"
          - rule-name: "clearance-minimum-price-protection"
            rule-condition: "(#basePrice * 0.5) < 1.0"
            rule-calculation: "T(java.lang.Math).max(#basePrice * 0.5, 1.0)"
            rule-description: "Maintain minimum $1.00 clearance price"
            rule-priority: 2
            rule-action: "PROTECT"
          - rule-name: "clearance-liquidation-check"
            rule-condition: "#basePrice >= 1000.0"
            rule-calculation: "#basePrice * 0.3"
            rule-description: "Apply 70% liquidation discount for high-value items"
            rule-priority: 3
            rule-action: "LIQUIDATE"
        engine-outcomes:
          success-outcome: "CLEARANCE_DISCOUNT_APPLIED"
          failure-outcome: "CLEARANCE_DISCOUNT_FAILED"
        audit-requirements:
          - "Log clearance discount applications"
          - "Track liquidation pricing decisions"
          
      tiered-discount-engine:
        engine-id: "TIERED_DISCOUNT_ENGINE"
        engine-name: "Tiered Discount Engine"
        engine-description: "Engine for calculating tiered discounts based on price ranges"
        discount-rules:
          - rule-name: "tier-1-discount"
            rule-condition: "#basePrice < 200.0 && #pricingType == 'Sale'"
            rule-calculation: "#basePrice * 0.85"
            rule-description: "15% discount for items under $200"
            rule-priority: 1
            rule-action: "CALCULATE"
          - rule-name: "tier-2-discount"
            rule-condition: "#basePrice >= 200.0 && #basePrice < 500.0 && #pricingType == 'Sale'"
            rule-calculation: "#basePrice * 0.80"
            rule-description: "20% discount for $200-$499 range"
            rule-priority: 1
            rule-action: "CALCULATE"
          - rule-name: "tier-3-discount"
            rule-condition: "#basePrice >= 500.0 && #pricingType == 'Sale'"
            rule-calculation: "#basePrice * 0.75"
            rule-description: "25% discount for $500+ range"
            rule-priority: 1
            rule-action: "CALCULATE"
          - rule-name: "tier-discount-validation"
            rule-condition: "true"
            rule-description: "Validate tier-based discount application"
            rule-priority: 2
            rule-action: "VALIDATE"
        engine-outcomes:
          success-outcome: "TIERED_DISCOUNT_APPLIED"
          failure-outcome: "TIERED_DISCOUNT_FAILED"
        audit-requirements:
          - "Log tier assignments"
          - "Track tiered discount effectiveness"
    engine-settings:
      tiered-calculation: true
      minimum-price-protection: true
      liquidation-support: true
    
  premium-rule-engines:
    engine-type: "premium-rule-engines"
    engine-name: "Premium Rule Engines"
    description: "Rule engines for premium pricing calculation and application"
    engine-characteristics:
      rule-category: "PREMIUM"
      execution-model: "CONDITIONAL"
      calculation-focus: "PREMIUM_APPLICATION"
    rule-engines:
      premium-markup-engine:
        engine-id: "PREMIUM_MARKUP_ENGINE"
        engine-name: "Premium Markup Engine"
        engine-description: "Engine for calculating premium markups"
        premium-rules:
          - rule-name: "premium-eligibility-check"
            rule-condition: "#basePrice >= 100.0"
            rule-description: "Premium pricing available for items >= $100"
            rule-priority: 1
            rule-action: "VALIDATE"
          - rule-name: "premium-markup-calculation"
            rule-condition: "#basePrice >= 100.0 && #pricingType == 'Premium'"
            rule-calculation: "#basePrice * 1.2"
            rule-description: "Apply 20% premium markup"
            rule-priority: 1
            rule-action: "CALCULATE"
          - rule-name: "premium-fallback-handling"
            rule-condition: "#basePrice < 100.0 && #pricingType == 'Premium'"
            rule-calculation: "#basePrice"
            rule-description: "Use base price for items under $100"
            rule-priority: 2
            rule-action: "FALLBACK"
          - rule-name: "premium-maximum-check"
            rule-condition: "(#basePrice * 1.2) > 100000"
            rule-description: "Premium price should not exceed $100,000"
            rule-priority: 3
            rule-severity: "WARNING"
            rule-action: "FLAG"
        engine-outcomes:
          success-outcome: "PREMIUM_MARKUP_APPLIED"
          failure-outcome: "PREMIUM_MARKUP_FAILED"
        audit-requirements:
          - "Log premium eligibility checks"
          - "Track premium markup applications"
          
      premium-tiered-engine:
        engine-id: "PREMIUM_TIERED_ENGINE"
        engine-name: "Premium Tiered Engine"
        engine-description: "Engine for calculating tiered premium markups"
        premium-rules:
          - rule-name: "premium-tier-1"
            rule-condition: "#basePrice >= 100.0 && #basePrice < 500.0 && #pricingType == 'Premium'"
            rule-calculation: "#basePrice * 1.1"
            rule-description: "10% premium for $100-$499 range"
            rule-priority: 1
            rule-action: "CALCULATE"
          - rule-name: "premium-tier-2"
            rule-condition: "#basePrice >= 500.0 && #basePrice < 1000.0 && #pricingType == 'Premium'"
            rule-calculation: "#basePrice * 1.2"
            rule-description: "20% premium for $500-$999 range"
            rule-priority: 1
            rule-action: "CALCULATE"
          - rule-name: "premium-tier-3"
            rule-condition: "#basePrice >= 1000.0 && #pricingType == 'Premium'"
            rule-calculation: "#basePrice * 1.25"
            rule-description: "25% premium for $1000+ range"
            rule-priority: 1
            rule-action: "CALCULATE"
          - rule-name: "premium-tier-validation"
            rule-condition: "true"
            rule-description: "Validate tier-based premium application"
            rule-priority: 2
            rule-action: "VALIDATE"
        engine-outcomes:
          success-outcome: "PREMIUM_TIERED_APPLIED"
          failure-outcome: "PREMIUM_TIERED_FAILED"
        audit-requirements:
          - "Log premium tier assignments"
          - "Track tiered premium effectiveness"
    engine-settings:
      eligibility-checking: true
      tiered-premiums: true
      fallback-support: true
    
  dynamic-pricing-engines:
    engine-type: "dynamic-pricing-engines"
    engine-name: "Dynamic Pricing Engines"
    description: "Rule engines for dynamic pricing calculation and optimization"
    engine-characteristics:
      rule-category: "DYNAMIC"
      execution-model: "ADAPTIVE"
      calculation-focus: "OPTIMIZATION"
    rule-engines:
      market-based-pricing-engine:
        engine-id: "MARKET_BASED_PRICING_ENGINE"
        engine-name: "Market-Based Pricing Engine"
        engine-description: "Engine for market-based dynamic pricing"
        dynamic-rules:
          - rule-name: "market-demand-adjustment"
            rule-condition: "#marketDemand == 'HIGH'"
            rule-calculation: "#basePrice * 1.15"
            rule-description: "15% increase for high market demand"
            rule-priority: 1
            rule-action: "ADJUST"
          - rule-name: "market-supply-adjustment"
            rule-condition: "#marketSupply == 'LOW'"
            rule-calculation: "#basePrice * 1.1"
            rule-description: "10% increase for low market supply"
            rule-priority: 1
            rule-action: "ADJUST"
          - rule-name: "competitive-pricing-adjustment"
            rule-condition: "#competitorPrice != null && #competitorPrice > 0"
            rule-calculation: "#competitorPrice * 0.95"
            rule-description: "Price 5% below competitor"
            rule-priority: 2
            rule-action: "COMPETE"
          - rule-name: "dynamic-pricing-bounds"
            rule-condition: "true"
            rule-calculation: "T(java.lang.Math).max(T(java.lang.Math).min(#calculatedPrice, #basePrice * 1.5), #basePrice * 0.7)"
            rule-description: "Keep dynamic price within 30% of base price"
            rule-priority: 3
            rule-action: "BOUND"
        engine-outcomes:
          success-outcome: "DYNAMIC_PRICING_APPLIED"
          failure-outcome: "DYNAMIC_PRICING_FAILED"
        audit-requirements:
          - "Log market condition assessments"
          - "Track dynamic pricing adjustments"
          
      time-based-pricing-engine:
        engine-id: "TIME_BASED_PRICING_ENGINE"
        engine-name: "Time-Based Pricing Engine"
        engine-description: "Engine for time-based dynamic pricing"
        dynamic-rules:
          - rule-name: "peak-hours-adjustment"
            rule-condition: "T(java.time.LocalTime).now().getHour() >= 9 && T(java.time.LocalTime).now().getHour() <= 17"
            rule-calculation: "#basePrice * 1.1"
            rule-description: "10% increase during peak hours (9 AM - 5 PM)"
            rule-priority: 1
            rule-action: "ADJUST"
          - rule-name: "off-peak-adjustment"
            rule-condition: "T(java.time.LocalTime).now().getHour() < 9 || T(java.time.LocalTime).now().getHour() > 17"
            rule-calculation: "#basePrice * 0.95"
            rule-description: "5% decrease during off-peak hours"
            rule-priority: 1
            rule-action: "ADJUST"
          - rule-name: "weekend-adjustment"
            rule-condition: "T(java.time.LocalDate).now().getDayOfWeek().getValue() >= 6"
            rule-calculation: "#basePrice * 1.05"
            rule-description: "5% increase on weekends"
            rule-priority: 2
            rule-action: "ADJUST"
          - rule-name: "holiday-adjustment"
            rule-condition: "#isHoliday == true"
            rule-calculation: "#basePrice * 1.2"
            rule-description: "20% increase on holidays"
            rule-priority: 3
            rule-action: "ADJUST"
        engine-outcomes:
          success-outcome: "TIME_BASED_PRICING_APPLIED"
          failure-outcome: "TIME_BASED_PRICING_FAILED"
        audit-requirements:
          - "Log time-based adjustments"
          - "Track temporal pricing patterns"
    engine-settings:
      market-awareness: true
      time-sensitivity: true
      competitive-analysis: true
    
  default:
    engine-type: "default"
    engine-name: "Default Pricing Rule Engines"
    description: "Default pricing rule engine processing"
    rule-engines:
      default-engine:
        engine-id: "DEFAULT_ENGINE"
        engine-name: "Default Engine"
        validation-rules:
          - rule-name: "default-validation"
            rule-condition: "#basePrice > 0"
            rule-description: "Basic price validation"
    engine-settings:
      default-processing: true

# Engine execution patterns
execution-patterns:
  rule-category-pattern:
    pattern-name: "Rule Category Pattern"
    description: "Execute engines based on rule categories"
    rule-categories: ["BASE_PRICE", "DISCOUNT", "PREMIUM", "DYNAMIC"]
    
  execution-model-pattern:
    pattern-name: "Execution Model Pattern"
    description: "Execute engines based on execution models"
    execution-models: ["SEQUENTIAL", "CONDITIONAL", "ADAPTIVE"]
    
  calculation-focus-pattern:
    pattern-name: "Calculation Focus Pattern"
    description: "Execute engines based on calculation focus"
    calculation-focuses: ["INPUT_VALIDATION", "DISCOUNT_APPLICATION", "PREMIUM_APPLICATION", "OPTIMIZATION"]

# Quality assurance
quality-assurance:
  engine-accuracy:
    - "Pricing rule engines must be accurate"
    - "Rule evaluations must be precise"
    - "Calculations must be correct"
    - "Validations must be comprehensive"
    
  engine-reliability:
    - "Engines must be consistent"
    - "Rule execution must be deterministic"
    - "Performance must be acceptable"
    - "Error handling must be robust"
    
  business-compliance:
    - "Rules must reflect business policies"
    - "Calculations must be transparent"
    - "Validations must meet requirements"
    - "Audit trails must be complete"
