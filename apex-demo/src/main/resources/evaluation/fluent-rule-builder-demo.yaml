# APEX Fluent Rule Builder Demo Configuration
# Real APEX YAML configuration for fluent rule builder processing
# Replaces all hardcoded fluent rule builder logic from FluentRuleBuilderExample (@version 1.0)

metadata:
  id: "Fluent Rule Builder Demo"
  name: "Fluent Rule Builder Demo"
  version: "1.0.0"
  description: "APEX-compliant fluent rule builder with real enrichment services"
  type: "rule-config"
  author: "apex.demo.team@company.com"
  created-date: "2024-12-24"
  tags: ["apex-demo", "evaluation", "fluent-rule-builder"]

# External data source for fluent rule builder configurations
external-data-sources:
  - name: "customer-processing-contexts-config"
    type: "external-data-config"
    source: "evaluation/fluent-rule-builder/customer-processing-contexts-config.yaml"
    
  - name: "rule-chain-definitions-config"
    type: "external-data-config"
    source: "evaluation/fluent-rule-builder/rule-chain-definitions-config.yaml"
    
  - name: "fluent-api-patterns-config"
    type: "external-data-config"
    source: "evaluation/fluent-rule-builder/fluent-api-patterns-config.yaml"

# APEX enrichment processing for fluent rule builder
enrichments:
  - name: "customer-processing-contexts-processing"
    type: "lookup-enrichment"
    description: "Process customer processing contexts using data-driven configuration"
    condition: "#data.builderType == 'customer-processing-contexts-processing'"
    lookup-source: "customer-processing-contexts-config"
    lookup-key: "#data.contextType != null ? #data.contextType : 'default'"
    target-field: "customerProcessingContextsResult"
    
  - name: "rule-chain-definitions-processing"
    type: "lookup-enrichment"
    description: "Process rule chain definitions using data-driven configuration"
    condition: "#data.builderType == 'rule-chain-definitions-processing'"
    lookup-source: "rule-chain-definitions-config"
    lookup-key: "#data.chainType != null ? #data.chainType : 'default'"
    target-field: "ruleChainDefinitionsResult"
    
  - name: "fluent-api-patterns-processing"
    type: "lookup-enrichment"
    description: "Process fluent API patterns using data-driven configuration"
    condition: "#data.builderType == 'fluent-api-patterns-processing'"
    lookup-source: "fluent-api-patterns-config"
    lookup-key: "#data.patternType != null ? #data.patternType : 'default'"
    target-field: "fluentApiPatternsResult"
    
  - name: "fluent-rule-builder-summary"
    type: "expression-enrichment"
    description: "Generate fluent rule builder summary"
    condition: "true"
    expression: "'Fluent rule builder completed: ' + (#data.builderType != null ? #data.builderType : 'unknown') + ' using real APEX services'"
    target-field: "fluentRuleBuilderSummary"

# Builder processing categories
processing-categories:
  - category: "customer-processing-contexts-processing"
    description: "Customer processing contexts creation and management"
    processing-type: "real-apex-enrichment"
    context-types:
      - "VIP customer contexts"
      - "Standard customer contexts"
      - "Premium customer contexts"
      - "Complex processing contexts"
    
  - category: "rule-chain-definitions-processing"
    description: "Rule chain definitions processing"
    processing-type: "real-apex-enrichment"
    chain-types:
      - "Customer type rule chains"
      - "Transaction value rule chains"
      - "Regional compliance rule chains"
      - "Multi-branch rule chains"
    
  - category: "fluent-api-patterns-processing"
    description: "Fluent API patterns processing"
    processing-type: "real-apex-enrichment"
    pattern-aspects:
      - "Rule chain building patterns"
      - "Conditional execution patterns"
      - "Success/failure handling patterns"
      - "Fluent API design patterns"

# Fluent rule building patterns
rule-building-patterns:
  customer-type-pattern:
    pattern-name: "Customer Type Rule Building"
    description: "Pattern for building customer type-based rules"
    customer-types: ["VIP", "PREMIUM", "STANDARD", "BASIC"]
    rule-building-logic:
      - "VIP customers get premium processing paths"
      - "Premium customers get enhanced processing"
      - "Standard customers get standard processing"
      - "Basic customers get simplified processing"
    
  transaction-value-pattern:
    pattern-name: "Transaction Value Rule Building"
    description: "Pattern for building transaction value-based rules"
    value-ranges: ["HIGH_VALUE", "MEDIUM_VALUE", "LOW_VALUE", "MICRO_VALUE"]
    rule-building-logic:
      - "High-value transactions require enhanced validation"
      - "Medium-value transactions use standard validation"
      - "Low-value transactions use simplified validation"
      - "Micro-value transactions use basic validation"
    
  regional-compliance-pattern:
    pattern-name: "Regional Compliance Rule Building"
    description: "Pattern for building regional compliance rules"
    regions: ["US", "EU", "ASIA", "AMERICAS", "EMEA"]
    rule-building-logic:
      - "US region requires specific compliance checks"
      - "EU region follows GDPR compliance patterns"
      - "ASIA region uses regional regulatory frameworks"
      - "Multi-regional transactions require comprehensive checks"

# Performance settings
performance-settings:
  customer-processing-contexts-processing:
    processing-timeout: 3000
    parallel-processing: true
    cache-results: true
    
  rule-chain-definitions-processing:
    processing-timeout: 4000
    parallel-processing: true
    chain-optimization: true
    
  fluent-api-patterns-processing:
    processing-timeout: 2000
    parallel-processing: false
    pattern-intensive: true

# Demonstration scenarios
demonstration-scenarios:
  comprehensive-fluent-building:
    scenario-name: "Comprehensive Fluent Rule Building"
    description: "Demonstrate comprehensive fluent rule building processing"
    steps:
      - "Load fluent rule builder configurations"
      - "Process customer processing contexts"
      - "Process rule chain definitions"
      - "Process fluent API patterns"
      - "Generate rule building results"
    expected-outcome: "Successful comprehensive fluent rule building"
    
  vip-customer-processing:
    scenario-name: "VIP Customer Processing"
    description: "Demonstrate VIP customer rule building"
    steps:
      - "Load VIP customer configurations"
      - "Process VIP customer contexts"
      - "Process high-value rule chains"
      - "Generate VIP processing results"
    expected-outcome: "Successful VIP customer rule building"
    
  multi-branch-processing:
    scenario-name: "Multi-Branch Processing"
    description: "Demonstrate multi-branch rule building"
    steps:
      - "Load multi-branch configurations"
      - "Process complex rule chain definitions"
      - "Process conditional execution patterns"
      - "Generate multi-branch results"
    expected-outcome: "Successful multi-branch rule building"

# Fluent rule builder configuration
fluent-rule-builder:
  builder-patterns:
    pattern-type: "Fluent Rule Builder Patterns"
    description: "Patterns for fluent rule builder processing"
    available-patterns:
      - "Chain building patterns"
      - "Conditional execution patterns"
      - "Success/failure handling patterns"
      - "Rule composition patterns"
      - "Fluent API design patterns"
    pattern-characteristics:
      - "Method chaining support"
      - "Conditional branching support"
      - "Error handling integration"
      - "Performance optimization"

# Quality assurance
quality-assurance:
  builder-reliability:
    - "Rule building must be deterministic"
    - "Fluent API patterns must be consistent"
    - "Rule chain definitions must be accurate"
    - "Performance must meet SLA requirements"
    
  rule-accuracy:
    - "Rule building must be precise"
    - "Customer type processing must be correct"
    - "Transaction value handling must be appropriate"
    - "Regional compliance must be comprehensive"
    
  processing-requirements:
    - "Rule building time must be reasonable"
    - "Memory usage must be controlled"
    - "Chain execution must be efficient"
    - "Parallel processing must be thread-safe"

# Output configuration
output:
  include-input: true
  include-metadata: true
  format: "enhanced"
  builder-summary: true
  performance-metrics: true
  chain-details: true
  pattern-details: true
  api-analysis: true
