# APEX Scenario-Based Processing Demo Configuration
# Real APEX YAML configuration for scenario-based processing
# Replaces all hardcoded scenario processing logic from ScenarioBasedProcessingDemo (@since 1.0.0)

metadata:
  id: "Scenario-Based Processing Demo"
  name: "Scenario-Based Processing Demo"
  version: "1.0.0"
  description: "APEX-compliant scenario-based processing with real enrichment services"
  type: "scenario"
  author: "apex.demo.team@company.com"
  business-domain: "Scenario Processing"
  owner: "apex.demo.team@company.com"
  created-date: "2024-12-24"
  tags: ["apex-demo", "evaluation", "scenario-processing"]

# Scenario definition for scenario-based processing
scenario:
  scenario-id: "scenario-based-processing-demo"
  name: "Scenario-Based Processing"
  description: "Comprehensive scenario-based processing with data routing and execution"
  business-domain: "Scenario Processing"
  processing-type: "scenario-routing"
  data-types:
    - "OtcOptions"
    - "CommoditySwap"
    - "SettlementInstruction"
  rule-configurations:
    - "sample-data-creation"
    - "scenario-routing"
    - "processing-execution"

# External data source for scenario processing configurations
external-data-sources:
  - name: "sample-data-records-config"
    type: "external-data-config"
    source: "evaluation/scenario-processing/sample-data-records-config.yaml"
    
  - name: "scenario-routing-config"
    type: "external-data-config"
    source: "evaluation/scenario-processing/scenario-routing-config.yaml"
    
  - name: "processing-execution-config"
    type: "external-data-config"
    source: "evaluation/scenario-processing/processing-execution-config.yaml"

# APEX enrichment processing for scenario-based processing
enrichments:
  - id: "sample-data-creation"
    name: "sample-data-creation"
    type: "lookup-enrichment"
    description: "Create sample data records using data-driven configuration"
    condition: "#data.processingType == 'sample-data-creation'"
    lookup-source: "sample-data-records-config"
    lookup-key: "#data.dataType != null ? #data.dataType : 'default'"
    target-field: "sampleDataCreationResult"

  - id: "scenario-routing"
    name: "scenario-routing"
    type: "lookup-enrichment"
    description: "Route data to appropriate scenarios using data-driven configuration"
    condition: "#data.processingType == 'scenario-routing'"
    lookup-source: "scenario-routing-config"
    lookup-key: "#data.routingType != null ? #data.routingType : 'default'"
    target-field: "scenarioRoutingResult"

  - id: "processing-execution"
    name: "processing-execution"
    type: "lookup-enrichment"
    description: "Execute scenario processing using data-driven configuration"
    condition: "#data.processingType == 'processing-execution'"
    lookup-source: "processing-execution-config"
    lookup-key: "#data.executionType != null ? #data.executionType : 'default'"
    target-field: "processingExecutionResult"

  - id: "scenario-based-processing-summary"
    name: "scenario-processing-summary"
    type: "expression-enrichment"
    description: "Generate scenario processing summary"
    condition: "true"
    expression: "'Scenario-based processing completed: ' + (#data.processingType != null ? #data.processingType : 'unknown') + ' using real APEX services'"
    target-field: "scenarioProcessingSummary"

# Scenario processing categories
processing-categories:
  - category: "sample-data-creation"
    description: "Sample data record creation and management"
    processing-type: "real-apex-enrichment"
    data-types:
      - "OTC Options"
      - "Commodity Swaps"
      - "Settlement Instructions"
      - "Complex financial instruments"
    
  - category: "scenario-routing"
    description: "Automatic data type routing to scenarios"
    processing-type: "real-apex-enrichment"
    routing-aspects:
      - "Data type detection"
      - "Scenario selection"
      - "Processing pipeline configuration"
      - "Fallback routing"
    
  - category: "processing-execution"
    description: "Scenario-specific processing execution"
    processing-type: "real-apex-enrichment"
    execution-aspects:
      - "Rule configuration loading"
      - "Processing pipeline execution"
      - "Result aggregation"
      - "Performance monitoring"

# Scenario processing patterns
processing-patterns:
  otc-options-pattern:
    pattern-name: "OTC Options Processing"
    description: "Pattern for processing OTC Options data"
    data-types: ["OtcOption"]
    scenario-routing:
      - "otc-options-standard"
      - "otc-options-complex"
    processing-steps:
      - "Data validation"
      - "Counterparty enrichment"
      - "Risk assessment"
      - "Settlement processing"
    
  commodity-swaps-pattern:
    pattern-name: "Commodity Swaps Processing"
    description: "Pattern for processing commodity swaps data"
    data-types: ["CommoditySwap"]
    scenario-routing:
      - "commodity-swaps-standard"
      - "commodity-swaps-complex"
    processing-steps:
      - "Swap validation"
      - "Commodity reference data"
      - "Pricing calculation"
      - "Risk monitoring"
    
  settlement-instructions-pattern:
    pattern-name: "Settlement Instructions Processing"
    description: "Pattern for processing settlement instructions"
    data-types: ["SettlementInstruction"]
    scenario-routing:
      - "settlement-auto-repair"
      - "settlement-manual-review"
    processing-steps:
      - "Instruction validation"
      - "Auto-repair assessment"
      - "Standing instruction lookup"
      - "Settlement execution"

# Performance settings
performance-settings:
  sample-data-creation:
    creation-timeout: 3000
    parallel-creation: true
    cache-results: true
    
  scenario-routing:
    routing-timeout: 1000
    parallel-routing: false
    cache-scenarios: true
    
  processing-execution:
    execution-timeout: 10000
    parallel-execution: true
    batch-processing: true

# Demonstration scenarios
demonstration-scenarios:
  basic-scenario-processing:
    scenario-name: "Basic Scenario Processing"
    description: "Demonstrate basic scenario-based processing"
    steps:
      - "Load scenario configurations"
      - "Create sample data records"
      - "Route data to scenarios"
      - "Execute scenario processing"
      - "Generate processing results"
    expected-outcome: "Successful scenario processing"
    
  advanced-routing:
    scenario-name: "Advanced Data Routing"
    description: "Demonstrate advanced data type routing"
    steps:
      - "Load routing configurations"
      - "Analyze data types"
      - "Apply routing rules"
      - "Select optimal scenarios"
      - "Generate routing results"
    expected-outcome: "Successful data routing"
    
  complex-processing:
    scenario-name: "Complex Processing Execution"
    description: "Demonstrate complex scenario processing"
    steps:
      - "Load processing configurations"
      - "Execute multi-stage processing"
      - "Apply business rules"
      - "Monitor performance"
      - "Generate execution results"
    expected-outcome: "Successful complex processing"

# Data type mappings
data-type-mappings:
  otc-option-mapping:
    source-type: "OtcOption"
    target-scenarios:
      - "otc-options-standard"
      - "otc-options-complex"
    routing-conditions:
      - condition: "#data.optionType == 'Call' && #data.notionalAmount.compareTo(new java.math.BigDecimal('1000000')) < 0"
        target-scenario: "otc-options-standard"
      - condition: "#data.optionType == 'Put' || #data.notionalAmount.compareTo(new java.math.BigDecimal('1000000')) >= 0"
        target-scenario: "otc-options-complex"
    
  commodity-swap-mapping:
    source-type: "CommoditySwap"
    target-scenarios:
      - "commodity-swaps-standard"
      - "commodity-swaps-complex"
    routing-conditions:
      - condition: "#data.commodityType == 'ENERGY' && #data.notionalAmount.compareTo(new java.math.BigDecimal('5000000')) < 0"
        target-scenario: "commodity-swaps-standard"
      - condition: "#data.commodityType != 'ENERGY' || #data.notionalAmount.compareTo(new java.math.BigDecimal('5000000')) >= 0"
        target-scenario: "commodity-swaps-complex"
    
  settlement-instruction-mapping:
    source-type: "SettlementInstruction"
    target-scenarios:
      - "settlement-auto-repair"
      - "settlement-manual-review"
    routing-conditions:
      - condition: "#data.requiresRepair == true && #data.market in {'JAPAN', 'SINGAPORE', 'HONG_KONG'}"
        target-scenario: "settlement-auto-repair"
      - condition: "#data.requiresRepair == false || #data.market not in {'JAPAN', 'SINGAPORE', 'HONG_KONG'}"
        target-scenario: "settlement-manual-review"

# Quality assurance
quality-assurance:
  data-integrity:
    - "Sample data must be valid and complete"
    - "Routing decisions must be deterministic"
    - "Processing results must be consistent"
    - "Performance metrics must be accurate"
    
  scenario-validation:
    - "Scenarios must be properly configured"
    - "Routing rules must be comprehensive"
    - "Processing pipelines must be complete"
    - "Error handling must be robust"
    
  performance-validation:
    - "Processing time must be within limits"
    - "Memory usage must be controlled"
    - "Throughput must meet requirements"
    - "Scalability must be demonstrated"

# Output configuration
output:
  include-input: true
  include-metadata: true
  format: "enhanced"
  scenario-summary: true
  performance-metrics: true
  routing-details: true
  processing-results: true
