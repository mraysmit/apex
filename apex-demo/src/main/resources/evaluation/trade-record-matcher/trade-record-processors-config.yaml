# APEX Trade Record Processors Configuration
# External data source configuration for trade record processors
# Replaces hardcoded trade record processing logic from TradeRecordMatcherDemo

metadata:
  id: "Trade Record Processors Configuration"
  name: "Trade Record Processors Configuration"
  version: "1.0.0"
  description: "Data-driven trade record processors configuration for trade record matcher"
  type: "external-data-config"
  author: "apex.demo.team@company.com"
  created-date: "2024-12-24"
  tags: ["apex-demo", "evaluation", "trade-record-matcher", "trade-record-processors"]

# Trade record processors configuration by processor type
data:
  trade-record-parsing-processors:
    processor-type: "trade-record-parsing-processors"
    processor-name: "Trade Record Parsing Processors"
    description: "Processors for trade record parsing and format detection"
    processor-characteristics:
      processing-category: "PARSING"
      processing-method: "FORMAT_DETECTION"
      multi-format-support: true
    record-processors:
      csv-trade-record-parser:
        processor-id: "CSV_TRADE_RECORD_PARSER"
        processor-name: "CSV Trade Record Parser"
        processor-description: "Parser for CSV format trade records"
        format-specifications:
          format-type: "CSV"
          delimiter: ","
          quote-character: "\""
          escape-character: "\\"
          header-row: true
        parsing-rules:
          - rule-name: "csv-header-detection"
            rule-condition: "#recordContent != null"
            rule-calculation: "#recordContent.contains('tradeId,symbol,quantity,price') ? 1.0 : 0.0"
            rule-description: "Detect CSV header format"
            rule-priority: 1
            rule-action: "DETECT"
          - rule-name: "csv-field-parsing"
            rule-condition: "#recordFormat == 'CSV'"
            rule-calculation: "#csvParser.parseFields(#recordContent)"
            rule-description: "Parse CSV fields into trade object"
            rule-priority: 2
            rule-action: "PARSE"
          - rule-name: "csv-data-validation"
            rule-condition: "#parsedFields != null"
            rule-calculation: "#csvValidator.validateFields(#parsedFields) ? 1.0 : 0.0"
            rule-description: "Validate parsed CSV data"
            rule-priority: 3
            rule-action: "VALIDATE"
        field-mappings:
          - source-field: "tradeId"
            target-field: "tradeId"
            field-type: "STRING"
            required: true
          - source-field: "symbol"
            target-field: "symbol"
            field-type: "STRING"
            required: true
          - source-field: "quantity"
            target-field: "quantity"
            field-type: "NUMERIC"
            required: true
          - source-field: "price"
            target-field: "price"
            field-type: "NUMERIC"
            required: true
          - source-field: "tradeDate"
            target-field: "tradeDate"
            field-type: "DATE"
            required: true
        processor-outcomes:
          success-outcome: "CSV_TRADE_RECORD_PARSED"
          failure-outcome: "CSV_TRADE_RECORD_PARSING_FAILED"
        audit-requirements:
          - "Log CSV parsing results"
          - "Track field mapping success rates"
          
      xml-trade-record-parser:
        processor-id: "XML_TRADE_RECORD_PARSER"
        processor-name: "XML Trade Record Parser"
        processor-description: "Parser for XML format trade records"
        format-specifications:
          format-type: "XML"
          root-element: "trade"
          namespace-aware: true
          schema-validation: true
        parsing-rules:
          - rule-name: "xml-structure-detection"
            rule-condition: "#recordContent != null"
            rule-calculation: "#recordContent.contains('<trade>') && #recordContent.contains('</trade>') ? 1.0 : 0.0"
            rule-description: "Detect XML trade structure"
            rule-priority: 1
            rule-action: "DETECT"
          - rule-name: "xml-element-parsing"
            rule-condition: "#recordFormat == 'XML'"
            rule-calculation: "#xmlParser.parseElements(#recordContent)"
            rule-description: "Parse XML elements into trade object"
            rule-priority: 2
            rule-action: "PARSE"
          - rule-name: "xml-schema-validation"
            rule-condition: "#parsedElements != null"
            rule-calculation: "#xmlValidator.validateSchema(#parsedElements) ? 1.0 : 0.0"
            rule-description: "Validate parsed XML against schema"
            rule-priority: 3
            rule-action: "VALIDATE"
        xpath-mappings:
          - xpath-expression: "//trade/tradeId/text()"
            target-field: "tradeId"
            field-type: "STRING"
            required: true
          - xpath-expression: "//trade/instrument/symbol/text()"
            target-field: "symbol"
            field-type: "STRING"
            required: true
          - xpath-expression: "//trade/quantity/text()"
            target-field: "quantity"
            field-type: "NUMERIC"
            required: true
          - xpath-expression: "//trade/price/text()"
            target-field: "price"
            field-type: "NUMERIC"
            required: true
          - xpath-expression: "//trade/tradeDate/text()"
            target-field: "tradeDate"
            field-type: "DATE"
            required: true
        processor-outcomes:
          success-outcome: "XML_TRADE_RECORD_PARSED"
          failure-outcome: "XML_TRADE_RECORD_PARSING_FAILED"
        audit-requirements:
          - "Log XML parsing results"
          - "Track XPath mapping effectiveness"
          
      json-trade-record-parser:
        processor-id: "JSON_TRADE_RECORD_PARSER"
        processor-name: "JSON Trade Record Parser"
        processor-description: "Parser for JSON format trade records"
        format-specifications:
          format-type: "JSON"
          schema-validation: true
          nested-object-support: true
          array-support: true
        parsing-rules:
          - rule-name: "json-structure-detection"
            rule-condition: "#recordContent != null"
            rule-calculation: "#recordContent.startsWith('{') && #recordContent.endsWith('}') ? 1.0 : 0.0"
            rule-description: "Detect JSON object structure"
            rule-priority: 1
            rule-action: "DETECT"
          - rule-name: "json-object-parsing"
            rule-condition: "#recordFormat == 'JSON'"
            rule-calculation: "#jsonParser.parseObject(#recordContent)"
            rule-description: "Parse JSON object into trade object"
            rule-priority: 2
            rule-action: "PARSE"
          - rule-name: "json-schema-validation"
            rule-condition: "#parsedObject != null"
            rule-calculation: "#jsonValidator.validateSchema(#parsedObject) ? 1.0 : 0.0"
            rule-description: "Validate parsed JSON against schema"
            rule-priority: 3
            rule-action: "VALIDATE"
        json-path-mappings:
          - json-path: "$.tradeId"
            target-field: "tradeId"
            field-type: "STRING"
            required: true
          - json-path: "$.instrument.symbol"
            target-field: "symbol"
            field-type: "STRING"
            required: true
          - json-path: "$.quantity"
            target-field: "quantity"
            field-type: "NUMERIC"
            required: true
          - json-path: "$.price"
            target-field: "price"
            field-type: "NUMERIC"
            required: true
          - json-path: "$.tradeDate"
            target-field: "tradeDate"
            field-type: "DATE"
            required: true
        processor-outcomes:
          success-outcome: "JSON_TRADE_RECORD_PARSED"
          failure-outcome: "JSON_TRADE_RECORD_PARSING_FAILED"
        audit-requirements:
          - "Log JSON parsing results"
          - "Track JSON path mapping success"
    processor-settings:
      multi-format-detection: true
      automatic-parsing: true
      validation-enabled: true
    
  trade-record-transformation-processors:
    processor-type: "trade-record-transformation-processors"
    processor-name: "Trade Record Transformation Processors"
    description: "Processors for trade record transformation and normalization"
    processor-characteristics:
      processing-category: "TRANSFORMATION"
      processing-method: "RULE_BASED"
      normalization-support: true
    record-processors:
      data-normalization-processor:
        processor-id: "DATA_NORMALIZATION_PROCESSOR"
        processor-name: "Data Normalization Processor"
        processor-description: "Processor for normalizing trade record data"
        normalization-rules:
          - rule-name: "symbol-normalization"
            rule-condition: "#trade.symbol != null"
            rule-calculation: "#trade.symbol.toUpperCase().trim()"
            rule-description: "Normalize symbol to uppercase and trim whitespace"
            rule-priority: 1
            rule-action: "NORMALIZE"
          - rule-name: "currency-normalization"
            rule-condition: "#trade.currency != null"
            rule-calculation: "#currencyNormalizer.normalize(#trade.currency)"
            rule-description: "Normalize currency to ISO 4217 format"
            rule-priority: 2
            rule-action: "NORMALIZE"
          - rule-name: "date-normalization"
            rule-condition: "#trade.tradeDate != null"
            rule-calculation: "#dateNormalizer.normalizeToISO(#trade.tradeDate)"
            rule-description: "Normalize date to ISO 8601 format"
            rule-priority: 3
            rule-action: "NORMALIZE"
          - rule-name: "numeric-precision-normalization"
            rule-condition: "#trade.price != null"
            rule-calculation: "T(java.math.BigDecimal).valueOf(#trade.price).setScale(4, T(java.math.RoundingMode).HALF_UP)"
            rule-description: "Normalize price to 4 decimal places"
            rule-priority: 4
            rule-action: "NORMALIZE"
        transformation-outcomes:
          success-outcome: "DATA_NORMALIZED"
          failure-outcome: "DATA_NORMALIZATION_FAILED"
        audit-requirements:
          - "Log data normalization results"
          - "Track normalization rule effectiveness"
          
      field-mapping-processor:
        processor-id: "FIELD_MAPPING_PROCESSOR"
        processor-name: "Field Mapping Processor"
        processor-description: "Processor for mapping fields between different trade record formats"
        mapping-rules:
          - rule-name: "legacy-to-standard-mapping"
            rule-condition: "#sourceFormat == 'LEGACY'"
            rule-calculation: "#fieldMapper.mapLegacyToStandard(#trade)"
            rule-description: "Map legacy format fields to standard format"
            rule-priority: 1
            rule-action: "MAP"
          - rule-name: "vendor-specific-mapping"
            rule-condition: "#sourceVendor != null"
            rule-calculation: "#fieldMapper.mapVendorSpecific(#trade, #sourceVendor)"
            rule-description: "Map vendor-specific fields to standard format"
            rule-priority: 2
            rule-action: "MAP"
          - rule-name: "calculated-field-generation"
            rule-condition: "#trade.quantity != null && #trade.price != null"
            rule-calculation: "#trade.quantity * #trade.price"
            rule-description: "Calculate notional amount from quantity and price"
            rule-priority: 3
            rule-action: "CALCULATE"
        field-mappings:
          - source-field: "trade_id"
            target-field: "tradeId"
            transformation: "DIRECT"
          - source-field: "instr_symbol"
            target-field: "symbol"
            transformation: "UPPERCASE"
          - source-field: "trade_qty"
            target-field: "quantity"
            transformation: "NUMERIC"
          - source-field: "trade_px"
            target-field: "price"
            transformation: "DECIMAL_4"
          - source-field: "trade_dt"
            target-field: "tradeDate"
            transformation: "DATE_ISO"
        transformation-outcomes:
          success-outcome: "FIELDS_MAPPED"
          failure-outcome: "FIELD_MAPPING_FAILED"
        audit-requirements:
          - "Log field mapping results"
          - "Track mapping rule success rates"
          
      data-enrichment-processor:
        processor-id: "DATA_ENRICHMENT_PROCESSOR"
        processor-name: "Data Enrichment Processor"
        processor-description: "Processor for enriching trade records with additional data"
        enrichment-rules:
          - rule-name: "market-data-enrichment"
            rule-condition: "#trade.symbol != null"
            rule-calculation: "#marketDataService.getMarketData(#trade.symbol)"
            rule-description: "Enrich trade with current market data"
            rule-priority: 1
            rule-action: "ENRICH"
          - rule-name: "counterparty-enrichment"
            rule-condition: "#trade.counterpartyId != null"
            rule-calculation: "#counterpartyService.getCounterpartyDetails(#trade.counterpartyId)"
            rule-description: "Enrich trade with counterparty details"
            rule-priority: 2
            rule-action: "ENRICH"
          - rule-name: "risk-metrics-enrichment"
            rule-condition: "#trade.symbol != null && #trade.quantity != null"
            rule-calculation: "#riskService.calculateRiskMetrics(#trade)"
            rule-description: "Enrich trade with risk metrics"
            rule-priority: 3
            rule-action: "ENRICH"
          - rule-name: "regulatory-classification-enrichment"
            rule-condition: "#trade.type != null"
            rule-calculation: "#regulatoryService.classifyTrade(#trade)"
            rule-description: "Enrich trade with regulatory classification"
            rule-priority: 4
            rule-action: "ENRICH"
        enrichment-sources:
          - source-name: "market-data-service"
            source-type: "EXTERNAL_API"
            source-description: "Real-time market data service"
          - source-name: "counterparty-service"
            source-type: "DATABASE"
            source-description: "Counterparty master data"
          - source-name: "risk-service"
            source-type: "CALCULATION_ENGINE"
            source-description: "Risk calculation service"
          - source-name: "regulatory-service"
            source-type: "RULE_ENGINE"
            source-description: "Regulatory classification service"
        transformation-outcomes:
          success-outcome: "DATA_ENRICHED"
          failure-outcome: "DATA_ENRICHMENT_FAILED"
        audit-requirements:
          - "Log data enrichment results"
          - "Track enrichment source availability"
    processor-settings:
      rule-based-transformation: true
      enrichment-enabled: true
      normalization-required: true
    
  trade-record-output-processors:
    processor-type: "trade-record-output-processors"
    processor-name: "Trade Record Output Processors"
    description: "Processors for trade record output formatting and delivery"
    processor-characteristics:
      processing-category: "OUTPUT"
      processing-method: "FORMAT_SPECIFIC"
      multi-destination-support: true
    record-processors:
      standard-format-output-processor:
        processor-id: "STANDARD_FORMAT_OUTPUT_PROCESSOR"
        processor-name: "Standard Format Output Processor"
        processor-description: "Processor for generating standard format trade record output"
        output-formats:
          - format-name: "ISO20022"
            format-description: "ISO 20022 standard format"
            format-version: "2019"
          - format-name: "FIX"
            format-description: "Financial Information eXchange protocol"
            format-version: "5.0"
          - format-name: "SWIFT"
            format-description: "SWIFT messaging format"
            format-version: "MT"
        formatting-rules:
          - rule-name: "iso20022-formatting"
            rule-condition: "#outputFormat == 'ISO20022'"
            rule-calculation: "#iso20022Formatter.format(#trade)"
            rule-description: "Format trade record as ISO 20022 message"
            rule-priority: 1
            rule-action: "FORMAT"
          - rule-name: "fix-formatting"
            rule-condition: "#outputFormat == 'FIX'"
            rule-calculation: "#fixFormatter.format(#trade)"
            rule-description: "Format trade record as FIX message"
            rule-priority: 2
            rule-action: "FORMAT"
          - rule-name: "swift-formatting"
            rule-condition: "#outputFormat == 'SWIFT'"
            rule-calculation: "#swiftFormatter.format(#trade)"
            rule-description: "Format trade record as SWIFT message"
            rule-priority: 3
            rule-action: "FORMAT"
        output-destinations:
          - destination-name: "downstream-system"
            destination-type: "MESSAGE_QUEUE"
            destination-description: "Downstream processing system"
          - destination-name: "regulatory-reporting"
            destination-type: "FILE_SYSTEM"
            destination-description: "Regulatory reporting repository"
          - destination-name: "audit-trail"
            destination-type: "DATABASE"
            destination-description: "Audit trail database"
        processor-outcomes:
          success-outcome: "STANDARD_FORMAT_OUTPUT_GENERATED"
          failure-outcome: "STANDARD_FORMAT_OUTPUT_FAILED"
        audit-requirements:
          - "Log output formatting results"
          - "Track delivery success rates"
          
      custom-format-output-processor:
        processor-id: "CUSTOM_FORMAT_OUTPUT_PROCESSOR"
        processor-name: "Custom Format Output Processor"
        processor-description: "Processor for generating custom format trade record output"
        custom-formats:
          - format-name: "PROPRIETARY_XML"
            format-description: "Proprietary XML format"
            format-template: "custom-trade-template.xml"
          - format-name: "LEGACY_FLAT_FILE"
            format-description: "Legacy flat file format"
            format-template: "legacy-trade-template.txt"
          - format-name: "JSON_API"
            format-description: "JSON API format"
            format-template: "api-trade-template.json"
        formatting-rules:
          - rule-name: "proprietary-xml-formatting"
            rule-condition: "#outputFormat == 'PROPRIETARY_XML'"
            rule-calculation: "#customXmlFormatter.format(#trade, 'custom-trade-template.xml')"
            rule-description: "Format trade record using proprietary XML template"
            rule-priority: 1
            rule-action: "FORMAT"
          - rule-name: "legacy-flat-file-formatting"
            rule-condition: "#outputFormat == 'LEGACY_FLAT_FILE'"
            rule-calculation: "#flatFileFormatter.format(#trade, 'legacy-trade-template.txt')"
            rule-description: "Format trade record using legacy flat file template"
            rule-priority: 2
            rule-action: "FORMAT"
          - rule-name: "json-api-formatting"
            rule-condition: "#outputFormat == 'JSON_API'"
            rule-calculation: "#jsonApiFormatter.format(#trade, 'api-trade-template.json')"
            rule-description: "Format trade record using JSON API template"
            rule-priority: 3
            rule-action: "FORMAT"
        processor-outcomes:
          success-outcome: "CUSTOM_FORMAT_OUTPUT_GENERATED"
          failure-outcome: "CUSTOM_FORMAT_OUTPUT_FAILED"
        audit-requirements:
          - "Log custom formatting results"
          - "Track template usage statistics"
    processor-settings:
      format-specific-processing: true
      template-based-formatting: true
      multi-destination-delivery: true
    
  default:
    processor-type: "default"
    processor-name: "Default Trade Record Processors"
    description: "Default trade record processor processing"
    record-processors:
      default-processor:
        processor-id: "DEFAULT_PROCESSOR"
        processor-name: "Default Processor"
        parsing-rules:
          - rule-name: "default-processing"
            rule-calculation: "#trade"
            rule-description: "Default processing (pass-through)"
    processor-settings:
      default-processing: true

# Processor execution patterns
execution-patterns:
  processing-category-pattern:
    pattern-name: "Processing Category Pattern"
    description: "Execute processors based on processing categories"
    processing-categories: ["PARSING", "TRANSFORMATION", "OUTPUT"]
    
  processing-method-pattern:
    pattern-name: "Processing Method Pattern"
    description: "Execute processors based on processing methods"
    processing-methods: ["FORMAT_DETECTION", "RULE_BASED", "FORMAT_SPECIFIC"]
    
  format-type-pattern:
    pattern-name: "Format Type Pattern"
    description: "Execute processors based on format types"
    format-types: ["CSV", "XML", "JSON", "ISO20022", "FIX", "SWIFT"]

# Quality assurance
quality-assurance:
  processor-accuracy:
    - "Trade record processors must be accurate"
    - "Parsing must be reliable"
    - "Transformations must be correct"
    - "Output formatting must be compliant"
    
  processor-reliability:
    - "Processors must be consistent"
    - "Processing must be repeatable"
    - "Performance must be acceptable"
    - "Error handling must be robust"
    
  format-compliance:
    - "Output must comply with format standards"
    - "Parsing must handle format variations"
    - "Transformations must preserve data integrity"
    - "Delivery must be reliable"
