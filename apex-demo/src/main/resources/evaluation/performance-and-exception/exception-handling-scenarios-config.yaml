# APEX Exception Handling Scenarios Configuration
# External data source configuration for exception handling scenarios
# Replaces hardcoded exception handling logic from PerformanceAndExceptionDemo

metadata:
  name: "Exception Handling Scenarios Configuration"
  version: "1.0.0"
  description: "Data-driven exception handling scenarios configuration for performance and exception handling processing"
  type: "external-data-config"
  author: "apex.demo.team@company.com"
  created-date: "2024-12-24"
  tags: ["apex-demo", "evaluation", "performance-and-exception", "exception-handling-scenarios"]

# Exception handling scenarios configuration by scenario type
data:
  invalid-expression-scenarios:
    scenario-type: "invalid-expression-scenarios"
    scenario-name: "Invalid Expression Scenarios"
    description: "Scenarios for testing invalid expression handling"
    scenario-characteristics:
      error-category: "SYNTAX_AND_SEMANTIC_ERRORS"
      recovery-strategy: "GRACEFUL_DEGRADATION"
      logging-level: "ERROR"
    exception-scenarios:
      syntax-error-scenario:
        scenario-id: "SYNTAX_ERROR_SCENARIO"
        scenario-name: "Syntax Error Handling Scenario"
        scenario-description: "Test handling of syntax errors in expressions"
        invalid-expressions:
          incomplete-comparison: "#amount >"
          missing-operand: "#amount + "
          unbalanced-parentheses: "#amount > (1000000"
          invalid-operator: "#amount <> 1000000"
        test-context:
          amount: 1000000.0
          currency: "USD"
          transaction-type: "SYNTAX_ERROR_TEST"
        expected-behavior:
          exception-type: "ExpressionSyntaxException"
          error-handling: "CATCH_AND_LOG"
          recovery-action: "RETURN_DEFAULT_VALUE"
          performance-impact: "MINIMAL"
        error-metrics:
          expected-error-rate: 1.0
          recovery-time-ms: 5
          memory-impact: "LOW"
          logging-overhead: "MINIMAL"
        audit-requirements:
          - "Log syntax error details"
          - "Track error recovery patterns"
          
      semantic-error-scenario:
        scenario-id: "SEMANTIC_ERROR_SCENARIO"
        scenario-name: "Semantic Error Handling Scenario"
        scenario-description: "Test handling of semantic errors in expressions"
        invalid-expressions:
          invalid-method-call: "#amount.invalidMethod()"
          type-mismatch: "#amount + 'string'"
          undefined-variable: "#undefinedVariable > 1000000"
          invalid-property-access: "#amount.nonExistentProperty"
        test-context:
          amount: 1000000.0
          currency: "USD"
          transaction-type: "SEMANTIC_ERROR_TEST"
        expected-behavior:
          exception-type: "ExpressionSemanticException"
          error-handling: "CATCH_AND_LOG"
          recovery-action: "RETURN_FALSE"
          performance-impact: "LOW"
        error-metrics:
          expected-error-rate: 1.0
          recovery-time-ms: 10
          memory-impact: "LOW"
          logging-overhead: "MODERATE"
        audit-requirements:
          - "Log semantic error details"
          - "Track method resolution failures"
          
      compilation-error-scenario:
        scenario-id: "COMPILATION_ERROR_SCENARIO"
        scenario-name: "Compilation Error Handling Scenario"
        scenario-description: "Test handling of expression compilation errors"
        invalid-expressions:
          malformed-expression: "#{amount > 1000000"
          invalid-spel-syntax: "#amount.@value > 1000000"
          circular-reference: "#self.amount > #self.amount"
          recursive-expression: "#amount > #amount.compareTo(#amount)"
        test-context:
          amount: 1000000.0
          currency: "USD"
          transaction-type: "COMPILATION_ERROR_TEST"
        expected-behavior:
          exception-type: "ExpressionCompilationException"
          error-handling: "CATCH_AND_LOG"
          recovery-action: "SKIP_RULE"
          performance-impact: "MODERATE"
        error-metrics:
          expected-error-rate: 1.0
          recovery-time-ms: 15
          memory-impact: "MODERATE"
          logging-overhead: "HIGH"
        audit-requirements:
          - "Log compilation error details"
          - "Track expression parsing failures"
    scenario-settings:
      error-tolerance: "HIGH"
      recovery-optimization: true
      detailed-logging: true
    
  null-pointer-scenarios:
    scenario-type: "null-pointer-scenarios"
    scenario-name: "Null Pointer Exception Scenarios"
    description: "Scenarios for testing null pointer exception handling"
    scenario-characteristics:
      error-category: "NULL_POINTER_ERRORS"
      recovery-strategy: "NULL_SAFE_OPERATIONS"
      logging-level: "WARN"
    exception-scenarios:
      null-context-scenario:
        scenario-id: "NULL_CONTEXT_SCENARIO"
        scenario-name: "Null Context Handling Scenario"
        scenario-description: "Test handling of null context values"
        null-expressions:
          null-amount-comparison: "#amount > 1000000"
          null-currency-check: "#currency == 'USD'"
          null-object-method: "#amount.toString()"
          null-property-access: "#amount.scale"
        test-context:
          amount: null
          currency: null
          transaction-type: "NULL_CONTEXT_TEST"
        expected-behavior:
          exception-type: "NullPointerException"
          error-handling: "CATCH_AND_HANDLE"
          recovery-action: "RETURN_FALSE"
          performance-impact: "LOW"
        error-metrics:
          expected-error-rate: 0.8
          recovery-time-ms: 3
          memory-impact: "MINIMAL"
          logging-overhead: "LOW"
        audit-requirements:
          - "Log null context handling"
          - "Track null safety patterns"
          
      null-safe-scenario:
        scenario-id: "NULL_SAFE_SCENARIO"
        scenario-name: "Null Safe Operations Scenario"
        scenario-description: "Test null-safe expression handling"
        null-safe-expressions:
          safe-null-check: "#amount != null && #amount > 1000000"
          elvis-operator: "#amount ?: 0 > 1000000"
          safe-navigation: "#amount?.compareTo(1000000) > 0"
          conditional-execution: "#amount != null ? #amount > 1000000 : false"
        test-context:
          amount: null
          currency: null
          transaction-type: "NULL_SAFE_TEST"
        expected-behavior:
          exception-type: "NONE"
          error-handling: "PREVENTIVE"
          recovery-action: "GRACEFUL_HANDLING"
          performance-impact: "MINIMAL"
        error-metrics:
          expected-error-rate: 0.0
          recovery-time-ms: 1
          memory-impact: "MINIMAL"
          logging-overhead: "NONE"
        audit-requirements:
          - "Log null-safe operation success"
          - "Track preventive handling patterns"
          
      partial-null-scenario:
        scenario-id: "PARTIAL_NULL_SCENARIO"
        scenario-name: "Partial Null Values Scenario"
        scenario-description: "Test handling of partially null contexts"
        mixed-expressions:
          amount-not-null: "#amount > 1000000"
          currency-null: "#currency == 'USD'"
          mixed-comparison: "#amount > 1000000 && #currency == 'USD'"
          conditional-mixed: "#amount != null && #currency != null && #amount > 1000000"
        test-context:
          amount: 1000000.0
          currency: null
          transaction-type: "PARTIAL_NULL_TEST"
        expected-behavior:
          exception-type: "CONDITIONAL"
          error-handling: "SELECTIVE"
          recovery-action: "PARTIAL_EVALUATION"
          performance-impact: "LOW"
        error-metrics:
          expected-error-rate: 0.5
          recovery-time-ms: 5
          memory-impact: "LOW"
          logging-overhead: "MODERATE"
        audit-requirements:
          - "Log partial null handling"
          - "Track selective evaluation patterns"
    scenario-settings:
      null-safety-validation: true
      preventive-checking: true
      graceful-degradation: true
    
  type-conversion-scenarios:
    scenario-type: "type-conversion-scenarios"
    scenario-name: "Type Conversion Exception Scenarios"
    description: "Scenarios for testing type conversion exception handling"
    scenario-characteristics:
      error-category: "TYPE_CONVERSION_ERRORS"
      recovery-strategy: "TYPE_SAFE_OPERATIONS"
      logging-level: "WARN"
    exception-scenarios:
      string-to-number-scenario:
        scenario-id: "STRING_TO_NUMBER_SCENARIO"
        scenario-name: "String to Number Conversion Scenario"
        scenario-description: "Test handling of string to number conversion errors"
        conversion-expressions:
          invalid-number-string: "T(java.math.BigDecimal).new('invalid') > 1000000"
          empty-string-conversion: "T(java.math.BigDecimal).new('') > 1000000"
          null-string-conversion: "T(java.math.BigDecimal).new(null) > 1000000"
          special-character-string: "T(java.math.BigDecimal).new('$1,000,000') > 1000000"
        test-context:
          amount: "invalid_number"
          currency: "USD"
          transaction-type: "STRING_CONVERSION_TEST"
        expected-behavior:
          exception-type: "NumberFormatException"
          error-handling: "CATCH_AND_CONVERT"
          recovery-action: "USE_DEFAULT_VALUE"
          performance-impact: "MODERATE"
        error-metrics:
          expected-error-rate: 1.0
          recovery-time-ms: 8
          memory-impact: "MODERATE"
          logging-overhead: "MODERATE"
        audit-requirements:
          - "Log conversion error details"
          - "Track type conversion patterns"
          
      object-casting-scenario:
        scenario-id: "OBJECT_CASTING_SCENARIO"
        scenario-name: "Object Casting Exception Scenario"
        scenario-description: "Test handling of object casting exceptions"
        casting-expressions:
          invalid-cast: "(T(java.math.BigDecimal)) #amount > 1000000"
          type-mismatch-cast: "(T(java.lang.String)) #amount.length() > 5"
          null-cast: "(T(java.math.BigDecimal)) null > 1000000"
          primitive-object-cast: "(T(java.lang.Integer)) #amount > 1000000"
        test-context:
          amount: "not_a_number"
          currency: "USD"
          transaction-type: "CASTING_TEST"
        expected-behavior:
          exception-type: "ClassCastException"
          error-handling: "CATCH_AND_VALIDATE"
          recovery-action: "TYPE_SAFE_FALLBACK"
          performance-impact: "MODERATE"
        error-metrics:
          expected-error-rate: 1.0
          recovery-time-ms: 10
          memory-impact: "MODERATE"
          logging-overhead: "HIGH"
        audit-requirements:
          - "Log casting error details"
          - "Track type safety violations"
    scenario-settings:
      type-validation: true
      safe-conversion: true
      fallback-values: true
    
  mixed-rule-scenarios:
    scenario-type: "mixed-rule-scenarios"
    scenario-name: "Mixed Rule Exception Scenarios"
    description: "Scenarios for testing mixed valid and invalid rule handling"
    scenario-characteristics:
      error-category: "MIXED_EXECUTION_ERRORS"
      recovery-strategy: "CONTINUE_ON_ERROR"
      logging-level: "INFO"
    exception-scenarios:
      valid-invalid-mix-scenario:
        scenario-id: "VALID_INVALID_MIX_SCENARIO"
        scenario-name: "Valid and Invalid Rules Mix Scenario"
        scenario-description: "Test handling of mixed valid and invalid rules"
        mixed-rules:
          valid-rule-1:
            rule-name: "valid-rule-1"
            rule-condition: "#amount > 1000000"
            rule-description: "Valid rule 1"
            expected-result: "SUCCESS"
          invalid-rule-1:
            rule-name: "invalid-rule-1"
            rule-condition: "#amount.invalidMethod() > 1000000"
            rule-description: "Invalid rule 1"
            expected-result: "ERROR"
          valid-rule-2:
            rule-name: "valid-rule-2"
            rule-condition: "#currency == 'USD'"
            rule-description: "Valid rule 2"
            expected-result: "SUCCESS"
          invalid-rule-2:
            rule-name: "invalid-rule-2"
            rule-condition: "#amount >"
            rule-description: "Invalid rule 2"
            expected-result: "ERROR"
          valid-rule-3:
            rule-name: "valid-rule-3"
            rule-condition: "#amount < 100000000"
            rule-description: "Valid rule 3"
            expected-result: "SUCCESS"
        test-context:
          amount: 5000000.0
          currency: "USD"
          transaction-type: "MIXED_RULES_TEST"
        expected-behavior:
          success-count: 3
          error-count: 2
          error-handling: "CONTINUE_PROCESSING"
          recovery-action: "LOG_AND_CONTINUE"
          performance-impact: "VARIABLE"
        error-metrics:
          expected-error-rate: 0.4
          recovery-time-ms: 12
          memory-impact: "MODERATE"
          logging-overhead: "HIGH"
        audit-requirements:
          - "Log mixed rule execution results"
          - "Track success/failure ratios"
          
      error-recovery-scenario:
        scenario-id: "ERROR_RECOVERY_SCENARIO"
        scenario-name: "Error Recovery Scenario"
        scenario-description: "Test error recovery and continuation patterns"
        recovery-rules:
          primary-rule:
            rule-name: "primary-rule"
            rule-condition: "#amount.invalidMethod() > 1000000"
            rule-description: "Primary rule (will fail)"
            fallback-rule: "fallback-rule"
          fallback-rule:
            rule-name: "fallback-rule"
            rule-condition: "#amount > 1000000"
            rule-description: "Fallback rule (should succeed)"
            fallback-rule: null
          recovery-rule:
            rule-name: "recovery-rule"
            rule-condition: "#amount != null"
            rule-description: "Recovery validation rule"
            fallback-rule: null
        test-context:
          amount: 5000000.0
          currency: "USD"
          transaction-type: "ERROR_RECOVERY_TEST"
        expected-behavior:
          primary-result: "ERROR"
          fallback-result: "SUCCESS"
          recovery-result: "SUCCESS"
          error-handling: "FALLBACK_CHAIN"
          recovery-action: "USE_FALLBACK"
          performance-impact: "MODERATE"
        error-metrics:
          expected-error-rate: 0.33
          recovery-time-ms: 15
          memory-impact: "MODERATE"
          logging-overhead: "HIGH"
        audit-requirements:
          - "Log error recovery chain execution"
          - "Track fallback effectiveness"
    scenario-settings:
      continue-on-error: true
      fallback-chains: true
      comprehensive-logging: true
    
  default:
    scenario-type: "default"
    scenario-name: "Default Exception Handling Scenarios"
    description: "Default exception handling scenario processing"
    exception-scenarios:
      default-scenario:
        scenario-id: "DEFAULT_SCENARIO"
        scenario-name: "Default Scenario"
        expected-behavior:
          error-handling: "BASIC"
    scenario-settings:
      error-tolerance: "MODERATE"

# Scenario execution patterns
execution-patterns:
  error-type-pattern:
    pattern-name: "Error Type Pattern"
    description: "Execute scenarios based on error types"
    error-types: ["SYNTAX_ERROR", "SEMANTIC_ERROR", "NULL_POINTER", "TYPE_CONVERSION"]
    
  recovery-strategy-pattern:
    pattern-name: "Recovery Strategy Pattern"
    description: "Execute scenarios based on recovery strategies"
    recovery-strategies: ["GRACEFUL_DEGRADATION", "NULL_SAFE_OPERATIONS", "TYPE_SAFE_OPERATIONS", "CONTINUE_ON_ERROR"]
    
  error-severity-pattern:
    pattern-name: "Error Severity Pattern"
    description: "Execute scenarios based on error severity"
    severity-levels: ["LOW", "MODERATE", "HIGH", "CRITICAL"]

# Quality assurance
quality-assurance:
  scenario-accuracy:
    - "Exception scenarios must be realistic"
    - "Error conditions must be reproducible"
    - "Recovery strategies must be effective"
    - "Performance impact must be measured"
    
  error-handling-reliability:
    - "Exception handling must be consistent"
    - "Recovery mechanisms must be reliable"
    - "Error logging must be comprehensive"
    - "Performance degradation must be controlled"
    
  testing-requirements:
    - "Scenario execution must be deterministic"
    - "Error injection must be controlled"
    - "Recovery testing must be thorough"
    - "Performance monitoring must be accurate"
