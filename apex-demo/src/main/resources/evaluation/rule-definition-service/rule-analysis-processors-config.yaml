# APEX Rule Analysis Processors Configuration
# External data source configuration for rule analysis processors
# Replaces hardcoded rule analysis logic from RuleDefinitionServiceDemo

metadata:
  name: "Rule Analysis Processors Configuration"
  version: "1.0.0"
  description: "Data-driven rule analysis processors configuration for rule definition service"
  type: "external-data-config"
  author: "apex.demo.team@company.com"
  created-date: "2024-12-24"
  tags: ["apex-demo", "evaluation", "rule-definition-service", "rule-analysis-processors"]

# Rule analysis processors configuration by processor type
data:
  rule-complexity-analysis-processors:
    processor-type: "rule-complexity-analysis-processors"
    processor-name: "Rule Complexity Analysis Processors"
    description: "Processors for rule complexity analysis and measurement"
    processor-characteristics:
      analysis-category: "COMPLEXITY"
      measurement-method: "MULTI_DIMENSIONAL"
      scoring-approach: "WEIGHTED"
    analysis-processors:
      cyclomatic-complexity-processor:
        processor-id: "CYCLOMATIC_COMPLEXITY_PROCESSOR"
        processor-name: "Cyclomatic Complexity Analysis Processor"
        processor-description: "Processor for analyzing cyclomatic complexity of rules"
        complexity-metrics:
          - metric-name: "decision-points"
            metric-description: "Number of decision points in rule logic"
            metric-weight: 0.4
            metric-calculation: "#rule.conditions.size() + #rule.logicalOperators.count('&&') + #rule.logicalOperators.count('||')"
          - metric-name: "nested-conditions"
            metric-description: "Depth of nested conditions"
            metric-weight: 0.3
            metric-calculation: "#rule.maxNestingDepth"
          - metric-name: "conditional-branches"
            metric-description: "Number of conditional branches"
            metric-weight: 0.3
            metric-calculation: "#rule.ifElseStatements.size() + #rule.ternaryOperators.size()"
        analysis-rules:
          - rule-name: "simple-complexity-classification"
            rule-condition: "#complexity.cyclomaticScore <= 5"
            rule-result: "SIMPLE"
            rule-description: "Classify rule as simple complexity"
            rule-priority: 1
          - rule-name: "moderate-complexity-classification"
            rule-condition: "#complexity.cyclomaticScore > 5 && #complexity.cyclomaticScore <= 10"
            rule-result: "MODERATE"
            rule-description: "Classify rule as moderate complexity"
            rule-priority: 2
          - rule-name: "complex-complexity-classification"
            rule-condition: "#complexity.cyclomaticScore > 10 && #complexity.cyclomaticScore <= 20"
            rule-result: "COMPLEX"
            rule-description: "Classify rule as complex"
            rule-priority: 3
          - rule-name: "very-complex-complexity-classification"
            rule-condition: "#complexity.cyclomaticScore > 20"
            rule-result: "VERY_COMPLEX"
            rule-description: "Classify rule as very complex"
            rule-priority: 4
        complexity-thresholds:
          simple-threshold: 5
          moderate-threshold: 10
          complex-threshold: 20
          very-complex-threshold: 999
        processor-outcomes:
          success-outcome: "CYCLOMATIC_COMPLEXITY_ANALYZED"
          failure-outcome: "CYCLOMATIC_COMPLEXITY_ANALYSIS_FAILED"
        audit-requirements:
          - "Log complexity analysis results"
          - "Track complexity trends over time"
          
      cognitive-complexity-processor:
        processor-id: "COGNITIVE_COMPLEXITY_PROCESSOR"
        processor-name: "Cognitive Complexity Analysis Processor"
        processor-description: "Processor for analyzing cognitive complexity of rules"
        complexity-factors:
          - factor-name: "logical-operators"
            factor-description: "Complexity from logical operators"
            factor-weight: 0.25
            factor-scoring:
              - operator: "&&"
                score: 1
              - operator: "||"
                score: 1
              - operator: "!"
                score: 2
          - factor-name: "nested-structures"
            factor-description: "Complexity from nested structures"
            factor-weight: 0.3
            factor-scoring:
              - nesting-level: 1
                score: 1
              - nesting-level: 2
                score: 2
              - nesting-level: 3
                score: 4
              - nesting-level: 4
                score: 8
          - factor-name: "variable-references"
            factor-description: "Complexity from variable references"
            factor-weight: 0.2
            factor-scoring:
              - reference-type: "simple"
                score: 0.5
              - reference-type: "nested"
                score: 1
              - reference-type: "method-call"
                score: 2
          - factor-name: "expression-complexity"
            factor-description: "Complexity from expression evaluation"
            factor-weight: 0.25
            factor-scoring:
              - expression-type: "arithmetic"
                score: 1
              - expression-type: "string-manipulation"
                score: 2
              - expression-type: "date-calculation"
                score: 3
              - expression-type: "collection-operation"
                score: 4
        analysis-rules:
          - rule-name: "cognitive-complexity-calculation"
            rule-condition: "true"
            rule-calculation: "(#logicalOperatorScore * 0.25) + (#nestedStructureScore * 0.3) + (#variableReferenceScore * 0.2) + (#expressionComplexityScore * 0.25)"
            rule-description: "Calculate cognitive complexity score"
            rule-priority: 1
          - rule-name: "cognitive-complexity-classification"
            rule-condition: "#cognitiveScore <= 10"
            rule-result: "LOW_COGNITIVE_LOAD"
            rule-description: "Classify as low cognitive load"
            rule-priority: 2
        processor-outcomes:
          success-outcome: "COGNITIVE_COMPLEXITY_ANALYZED"
          failure-outcome: "COGNITIVE_COMPLEXITY_ANALYSIS_FAILED"
        audit-requirements:
          - "Log cognitive complexity analysis"
          - "Track cognitive load patterns"
          
      maintainability-complexity-processor:
        processor-id: "MAINTAINABILITY_COMPLEXITY_PROCESSOR"
        processor-name: "Maintainability Complexity Analysis Processor"
        processor-description: "Processor for analyzing rule maintainability complexity"
        maintainability-dimensions:
          - dimension-name: "readability"
            dimension-description: "How easy the rule is to read and understand"
            dimension-weight: 0.3
            dimension-factors: ["variable-naming", "comment-quality", "structure-clarity"]
          - dimension-name: "modifiability"
            dimension-description: "How easy the rule is to modify"
            dimension-weight: 0.25
            dimension-factors: ["coupling", "cohesion", "dependency-count"]
          - dimension-name: "testability"
            dimension-description: "How easy the rule is to test"
            dimension-weight: 0.25
            dimension-factors: ["input-variability", "output-predictability", "side-effects"]
          - dimension-name: "reusability"
            dimension-description: "How reusable the rule is"
            dimension-weight: 0.2
            dimension-factors: ["parameterization", "generalization", "context-independence"]
        analysis-rules:
          - rule-name: "maintainability-score-calculation"
            rule-condition: "true"
            rule-calculation: "(#readabilityScore * 0.3) + (#modifiabilityScore * 0.25) + (#testabilityScore * 0.25) + (#reusabilityScore * 0.2)"
            rule-description: "Calculate maintainability score"
            rule-priority: 1
          - rule-name: "high-maintainability-classification"
            rule-condition: "#maintainabilityScore >= 80"
            rule-result: "HIGH_MAINTAINABILITY"
            rule-description: "Classify as high maintainability"
            rule-priority: 2
          - rule-name: "medium-maintainability-classification"
            rule-condition: "#maintainabilityScore >= 60 && #maintainabilityScore < 80"
            rule-result: "MEDIUM_MAINTAINABILITY"
            rule-description: "Classify as medium maintainability"
            rule-priority: 3
          - rule-name: "low-maintainability-classification"
            rule-condition: "#maintainabilityScore < 60"
            rule-result: "LOW_MAINTAINABILITY"
            rule-description: "Classify as low maintainability"
            rule-priority: 4
        processor-outcomes:
          success-outcome: "MAINTAINABILITY_COMPLEXITY_ANALYZED"
          failure-outcome: "MAINTAINABILITY_COMPLEXITY_ANALYSIS_FAILED"
        audit-requirements:
          - "Log maintainability analysis results"
          - "Track maintainability improvement opportunities"
    processor-settings:
      complexity-analysis: true
      multi-dimensional-scoring: true
      trend-tracking: true
    
  rule-performance-analysis-processors:
    processor-type: "rule-performance-analysis-processors"
    processor-name: "Rule Performance Analysis Processors"
    description: "Processors for rule performance analysis and optimization"
    processor-characteristics:
      analysis-category: "PERFORMANCE"
      measurement-method: "RUNTIME_PROFILING"
      optimization-focus: "EXECUTION_EFFICIENCY"
    analysis-processors:
      execution-time-processor:
        processor-id: "EXECUTION_TIME_PROCESSOR"
        processor-name: "Rule Execution Time Analysis Processor"
        processor-description: "Processor for analyzing rule execution time performance"
        performance-metrics:
          - metric-name: "average-execution-time"
            metric-description: "Average time to execute the rule"
            metric-unit: "milliseconds"
            metric-target: 100
          - metric-name: "95th-percentile-execution-time"
            metric-description: "95th percentile execution time"
            metric-unit: "milliseconds"
            metric-target: 500
          - metric-name: "maximum-execution-time"
            metric-description: "Maximum observed execution time"
            metric-unit: "milliseconds"
            metric-target: 1000
        analysis-rules:
          - rule-name: "fast-execution-classification"
            rule-condition: "#averageExecutionTime <= 50"
            rule-result: "FAST_EXECUTION"
            rule-description: "Classify rule as fast execution"
            rule-priority: 1
          - rule-name: "acceptable-execution-classification"
            rule-condition: "#averageExecutionTime > 50 && #averageExecutionTime <= 100"
            rule-result: "ACCEPTABLE_EXECUTION"
            rule-description: "Classify rule as acceptable execution"
            rule-priority: 2
          - rule-name: "slow-execution-classification"
            rule-condition: "#averageExecutionTime > 100"
            rule-result: "SLOW_EXECUTION"
            rule-description: "Classify rule as slow execution"
            rule-priority: 3
        optimization-recommendations:
          - recommendation-condition: "#averageExecutionTime > 100"
            recommendation-action: "OPTIMIZE_CONDITION_EVALUATION_ORDER"
            recommendation-description: "Optimize condition evaluation order for better performance"
          - recommendation-condition: "#databaseCallCount > 5"
            recommendation-action: "CACHE_DATABASE_RESULTS"
            recommendation-description: "Cache database results to improve performance"
          - recommendation-condition: "#complexCalculationCount > 3"
            recommendation-action: "PRECOMPUTE_COMPLEX_CALCULATIONS"
            recommendation-description: "Precompute complex calculations where possible"
        processor-outcomes:
          success-outcome: "EXECUTION_TIME_ANALYZED"
          failure-outcome: "EXECUTION_TIME_ANALYSIS_FAILED"
        audit-requirements:
          - "Log execution time measurements"
          - "Track performance trends and degradations"
          
      memory-usage-processor:
        processor-id: "MEMORY_USAGE_PROCESSOR"
        processor-name: "Rule Memory Usage Analysis Processor"
        processor-description: "Processor for analyzing rule memory usage patterns"
        memory-metrics:
          - metric-name: "peak-memory-usage"
            metric-description: "Peak memory usage during rule execution"
            metric-unit: "megabytes"
            metric-target: 50
          - metric-name: "average-memory-usage"
            metric-description: "Average memory usage during rule execution"
            metric-unit: "megabytes"
            metric-target: 25
          - metric-name: "memory-allocation-rate"
            metric-description: "Rate of memory allocation during execution"
            metric-unit: "allocations-per-second"
            metric-target: 1000
        analysis-rules:
          - rule-name: "low-memory-usage-classification"
            rule-condition: "#peakMemoryUsage <= 25"
            rule-result: "LOW_MEMORY_USAGE"
            rule-description: "Classify rule as low memory usage"
            rule-priority: 1
          - rule-name: "moderate-memory-usage-classification"
            rule-condition: "#peakMemoryUsage > 25 && #peakMemoryUsage <= 50"
            rule-result: "MODERATE_MEMORY_USAGE"
            rule-description: "Classify rule as moderate memory usage"
            rule-priority: 2
          - rule-name: "high-memory-usage-classification"
            rule-condition: "#peakMemoryUsage > 50"
            rule-result: "HIGH_MEMORY_USAGE"
            rule-description: "Classify rule as high memory usage"
            rule-priority: 3
        processor-outcomes:
          success-outcome: "MEMORY_USAGE_ANALYZED"
          failure-outcome: "MEMORY_USAGE_ANALYSIS_FAILED"
        audit-requirements:
          - "Log memory usage patterns"
          - "Track memory optimization opportunities"
          
      throughput-processor:
        processor-id: "THROUGHPUT_PROCESSOR"
        processor-name: "Rule Throughput Analysis Processor"
        processor-description: "Processor for analyzing rule throughput and scalability"
        throughput-metrics:
          - metric-name: "rules-per-second"
            metric-description: "Number of rule executions per second"
            metric-unit: "executions-per-second"
            metric-target: 1000
          - metric-name: "concurrent-execution-capacity"
            metric-description: "Maximum concurrent rule executions"
            metric-unit: "concurrent-executions"
            metric-target: 100
          - metric-name: "scalability-factor"
            metric-description: "How well throughput scales with resources"
            metric-unit: "ratio"
            metric-target: 0.8
        analysis-rules:
          - rule-name: "high-throughput-classification"
            rule-condition: "#rulesPerSecond >= 1000"
            rule-result: "HIGH_THROUGHPUT"
            rule-description: "Classify rule as high throughput"
            rule-priority: 1
          - rule-name: "moderate-throughput-classification"
            rule-condition: "#rulesPerSecond >= 500 && #rulesPerSecond < 1000"
            rule-result: "MODERATE_THROUGHPUT"
            rule-description: "Classify rule as moderate throughput"
            rule-priority: 2
          - rule-name: "low-throughput-classification"
            rule-condition: "#rulesPerSecond < 500"
            rule-result: "LOW_THROUGHPUT"
            rule-description: "Classify rule as low throughput"
            rule-priority: 3
        processor-outcomes:
          success-outcome: "THROUGHPUT_ANALYZED"
          failure-outcome: "THROUGHPUT_ANALYSIS_FAILED"
        audit-requirements:
          - "Log throughput measurements"
          - "Track scalability characteristics"
    processor-settings:
      performance-profiling: true
      optimization-recommendations: true
      scalability-analysis: true
    
  rule-dependency-analysis-processors:
    processor-type: "rule-dependency-analysis-processors"
    processor-name: "Rule Dependency Analysis Processors"
    description: "Processors for rule dependency analysis and impact assessment"
    processor-characteristics:
      analysis-category: "DEPENDENCY"
      mapping-method: "GRAPH_ANALYSIS"
      impact-assessment: "COMPREHENSIVE"
    analysis-processors:
      dependency-graph-processor:
        processor-id: "DEPENDENCY_GRAPH_PROCESSOR"
        processor-name: "Rule Dependency Graph Analysis Processor"
        processor-description: "Processor for analyzing rule dependency graphs"
        dependency-types:
          - dependency-type: "direct-dependency"
            dependency-description: "Direct dependency between rules"
            dependency-weight: 1.0
          - dependency-type: "indirect-dependency"
            dependency-description: "Indirect dependency through other rules"
            dependency-weight: 0.5
          - dependency-type: "data-dependency"
            dependency-description: "Dependency through shared data"
            dependency-weight: 0.7
          - dependency-type: "execution-dependency"
            dependency-description: "Dependency through execution order"
            dependency-weight: 0.8
        analysis-rules:
          - rule-name: "dependency-count-analysis"
            rule-condition: "true"
            rule-calculation: "#directDependencies.size() + (#indirectDependencies.size() * 0.5) + (#dataDependencies.size() * 0.7) + (#executionDependencies.size() * 0.8)"
            rule-description: "Calculate weighted dependency count"
            rule-priority: 1
          - rule-name: "high-coupling-detection"
            rule-condition: "#dependencyScore > 10"
            rule-result: "HIGH_COUPLING"
            rule-description: "Detect high coupling in rule dependencies"
            rule-priority: 2
          - rule-name: "circular-dependency-detection"
            rule-condition: "#circularDependencies.size() > 0"
            rule-result: "CIRCULAR_DEPENDENCY_DETECTED"
            rule-description: "Detect circular dependencies in rules"
            rule-priority: 3
        processor-outcomes:
          success-outcome: "DEPENDENCY_GRAPH_ANALYZED"
          failure-outcome: "DEPENDENCY_GRAPH_ANALYSIS_FAILED"
        audit-requirements:
          - "Log dependency analysis results"
          - "Track dependency evolution over time"
          
      impact-analysis-processor:
        processor-id: "IMPACT_ANALYSIS_PROCESSOR"
        processor-name: "Rule Impact Analysis Processor"
        processor-description: "Processor for analyzing rule change impact"
        impact-dimensions:
          - dimension-name: "downstream-impact"
            dimension-description: "Impact on rules that depend on this rule"
            dimension-weight: 0.4
          - dimension-name: "upstream-impact"
            dimension-description: "Impact from rules this rule depends on"
            dimension-weight: 0.3
          - dimension-name: "data-impact"
            dimension-description: "Impact on shared data and state"
            dimension-weight: 0.2
          - dimension-name: "system-impact"
            dimension-description: "Impact on overall system behavior"
            dimension-weight: 0.1
        analysis-rules:
          - rule-name: "impact-score-calculation"
            rule-condition: "true"
            rule-calculation: "(#downstreamImpact * 0.4) + (#upstreamImpact * 0.3) + (#dataImpact * 0.2) + (#systemImpact * 0.1)"
            rule-description: "Calculate overall impact score"
            rule-priority: 1
          - rule-name: "high-impact-classification"
            rule-condition: "#impactScore >= 8"
            rule-result: "HIGH_IMPACT"
            rule-description: "Classify rule as high impact"
            rule-priority: 2
          - rule-name: "medium-impact-classification"
            rule-condition: "#impactScore >= 5 && #impactScore < 8"
            rule-result: "MEDIUM_IMPACT"
            rule-description: "Classify rule as medium impact"
            rule-priority: 3
          - rule-name: "low-impact-classification"
            rule-condition: "#impactScore < 5"
            rule-result: "LOW_IMPACT"
            rule-description: "Classify rule as low impact"
            rule-priority: 4
        processor-outcomes:
          success-outcome: "IMPACT_ANALYZED"
          failure-outcome: "IMPACT_ANALYSIS_FAILED"
        audit-requirements:
          - "Log impact analysis results"
          - "Track impact prediction accuracy"
    processor-settings:
      dependency-mapping: true
      impact-assessment: true
      graph-analysis: true
    
  rule-quality-analysis-processors:
    processor-type: "rule-quality-analysis-processors"
    processor-name: "Rule Quality Analysis Processors"
    description: "Processors for rule quality analysis and assessment"
    processor-characteristics:
      analysis-category: "QUALITY"
      assessment-method: "MULTI_CRITERIA"
      scoring-approach: "COMPREHENSIVE"
    analysis-processors:
      rule-quality-metrics-processor:
        processor-id: "RULE_QUALITY_METRICS_PROCESSOR"
        processor-name: "Rule Quality Metrics Analysis Processor"
        processor-description: "Processor for analyzing rule quality metrics"
        quality-dimensions:
          - dimension-name: "correctness"
            dimension-description: "How correct the rule logic is"
            dimension-weight: 0.3
            dimension-criteria: ["syntax-correctness", "logic-correctness", "business-correctness"]
          - dimension-name: "completeness"
            dimension-description: "How complete the rule coverage is"
            dimension-weight: 0.25
            dimension-criteria: ["scenario-coverage", "edge-case-handling", "exception-handling"]
          - dimension-name: "consistency"
            dimension-description: "How consistent the rule is with others"
            dimension-weight: 0.2
            dimension-criteria: ["naming-consistency", "logic-consistency", "style-consistency"]
          - dimension-name: "clarity"
            dimension-description: "How clear and understandable the rule is"
            dimension-weight: 0.15
            dimension-criteria: ["readability", "documentation-quality", "intent-clarity"]
          - dimension-name: "efficiency"
            dimension-description: "How efficient the rule execution is"
            dimension-weight: 0.1
            dimension-criteria: ["performance", "resource-usage", "optimization-level"]
        analysis-rules:
          - rule-name: "quality-score-calculation"
            rule-condition: "true"
            rule-calculation: "(#correctnessScore * 0.3) + (#completenessScore * 0.25) + (#consistencyScore * 0.2) + (#clarityScore * 0.15) + (#efficiencyScore * 0.1)"
            rule-description: "Calculate overall quality score"
            rule-priority: 1
          - rule-name: "high-quality-classification"
            rule-condition: "#qualityScore >= 85"
            rule-result: "HIGH_QUALITY"
            rule-description: "Classify rule as high quality"
            rule-priority: 2
          - rule-name: "acceptable-quality-classification"
            rule-condition: "#qualityScore >= 70 && #qualityScore < 85"
            rule-result: "ACCEPTABLE_QUALITY"
            rule-description: "Classify rule as acceptable quality"
            rule-priority: 3
          - rule-name: "low-quality-classification"
            rule-condition: "#qualityScore < 70"
            rule-result: "LOW_QUALITY"
            rule-description: "Classify rule as low quality"
            rule-priority: 4
        quality-improvement-recommendations:
          - improvement-condition: "#correctnessScore < 80"
            improvement-action: "REVIEW_RULE_LOGIC"
            improvement-description: "Review and improve rule logic correctness"
          - improvement-condition: "#completenessScore < 75"
            improvement-action: "ENHANCE_SCENARIO_COVERAGE"
            improvement-description: "Enhance scenario and edge case coverage"
          - improvement-condition: "#clarityScore < 70"
            improvement-action: "IMPROVE_DOCUMENTATION"
            improvement-description: "Improve rule documentation and clarity"
        processor-outcomes:
          success-outcome: "RULE_QUALITY_ANALYZED"
          failure-outcome: "RULE_QUALITY_ANALYSIS_FAILED"
        audit-requirements:
          - "Log quality analysis results"
          - "Track quality improvement progress"
    processor-settings:
      quality-assessment: true
      improvement-recommendations: true
      comprehensive-scoring: true
    
  default:
    processor-type: "default"
    processor-name: "Default Rule Analysis Processors"
    description: "Default rule analysis processor processing"
    analysis-processors:
      default-processor:
        processor-id: "DEFAULT_PROCESSOR"
        processor-name: "Default Processor"
        analysis-rules:
          - rule-name: "default-analysis"
            rule-result: "ANALYZED"
            rule-description: "Default rule analysis"
    processor-settings:
      default-processing: true

# Processor execution patterns
execution-patterns:
  analysis-category-pattern:
    pattern-name: "Analysis Category Pattern"
    description: "Execute processors based on analysis categories"
    analysis-categories: ["COMPLEXITY", "PERFORMANCE", "DEPENDENCY", "QUALITY"]
    
  measurement-method-pattern:
    pattern-name: "Measurement Method Pattern"
    description: "Execute processors based on measurement methods"
    measurement-methods: ["MULTI_DIMENSIONAL", "RUNTIME_PROFILING", "GRAPH_ANALYSIS", "MULTI_CRITERIA"]
    
  scoring-approach-pattern:
    pattern-name: "Scoring Approach Pattern"
    description: "Execute processors based on scoring approaches"
    scoring-approaches: ["WEIGHTED", "EXECUTION_EFFICIENCY", "COMPREHENSIVE"]

# Quality assurance
quality-assurance:
  processor-accuracy:
    - "Rule analysis processors must be accurate"
    - "Analysis results must be reliable"
    - "Measurements must be precise"
    - "Scoring must be consistent"
    
  processor-reliability:
    - "Processors must be repeatable"
    - "Analysis must be consistent"
    - "Performance must be acceptable"
    - "Error handling must be robust"
    
  analytical-value:
    - "Analysis must provide actionable insights"
    - "Recommendations must be practical"
    - "Trends must be trackable"
    - "Results must support decision making"
