# APEX Field Actions Configuration
# External data source configuration for field actions processing
# Replaces hardcoded field transformer actions from CustomerTransformerDemo

metadata:
  name: "Field Actions Configuration"
  version: "1.0.0"
  description: "Data-driven field actions configuration for customer transformation processing"
  type: "external-data-config"
  author: "apex.demo.team@company.com"
  created-date: "2024-12-24"
  tags: ["apex-demo", "enrichment", "field-actions", "external-data"]

# Field actions configuration by action type
data:
  category-addition-actions:
    action-type: "category-addition-actions"
    action-name: "Category Addition Actions"
    description: "Actions for adding product categories to customer profiles"
    action-parameters:
      operation-type: "addition"
      field-target: "preferredCategories"
      validation-required: true
    field-actions:
      add-equity-action:
        action-id: "ADD_EQUITY"
        action-name: "Add Equity Category"
        action-description: "Add Equity category to customer's preferred categories"
        target-field: "preferredCategories"
        operation: "add"
        value: "Equity"
        action-logic:
          extractor-function: "customer -> customer.getPreferredCategories()"
          modifier-function: "categories -> { if (!categories.contains('Equity')) categories.add('Equity'); return categories; }"
          setter-function: "customer -> customer.setPreferredCategories(categories)"
        validation-rules:
          - "preferredCategories != null"
          - "!preferredCategories.contains('Equity')"
        audit-requirements:
          - "Log category addition"
          - "Track customer profile changes"
          
      add-fixed-income-action:
        action-id: "ADD_FIXED_INCOME"
        action-name: "Add FixedIncome Category"
        action-description: "Add FixedIncome category to customer's preferred categories"
        target-field: "preferredCategories"
        operation: "add"
        value: "FixedIncome"
        action-logic:
          extractor-function: "customer -> customer.getPreferredCategories()"
          modifier-function: "categories -> { if (!categories.contains('FixedIncome')) categories.add('FixedIncome'); return categories; }"
          setter-function: "customer -> customer.setPreferredCategories(categories)"
        validation-rules:
          - "preferredCategories != null"
          - "!preferredCategories.contains('FixedIncome')"
        audit-requirements:
          - "Log category addition"
          - "Track customer profile changes"
          
      add-etf-action:
        action-id: "ADD_ETF"
        action-name: "Add ETF Category"
        action-description: "Add ETF category to customer's preferred categories"
        target-field: "preferredCategories"
        operation: "add"
        value: "ETF"
        action-logic:
          extractor-function: "customer -> customer.getPreferredCategories()"
          modifier-function: "categories -> { if (!categories.contains('ETF')) categories.add('ETF'); return categories; }"
          setter-function: "customer -> customer.setPreferredCategories(categories)"
        validation-rules:
          - "preferredCategories != null"
          - "!preferredCategories.contains('ETF')"
        audit-requirements:
          - "Log category addition"
          - "Track customer profile changes"
          
      add-mutual-funds-action:
        action-id: "ADD_MUTUAL_FUNDS"
        action-name: "Add Mutual Funds Category"
        action-description: "Add Mutual Funds category to customer's preferred categories"
        target-field: "preferredCategories"
        operation: "add"
        value: "Mutual Funds"
        action-logic:
          extractor-function: "customer -> customer.getPreferredCategories()"
          modifier-function: "categories -> { if (!categories.contains('Mutual Funds')) categories.add('Mutual Funds'); return categories; }"
          setter-function: "customer -> customer.setPreferredCategories(categories)"
        validation-rules:
          - "preferredCategories != null"
          - "!preferredCategories.contains('Mutual Funds')"
        audit-requirements:
          - "Log category addition"
          - "Track customer profile changes"
          
      add-options-action:
        action-id: "ADD_OPTIONS"
        action-name: "Add Options Category"
        action-description: "Add Options category to customer's preferred categories"
        target-field: "preferredCategories"
        operation: "add"
        value: "Options"
        action-logic:
          extractor-function: "customer -> customer.getPreferredCategories()"
          modifier-function: "categories -> { if (!categories.contains('Options')) categories.add('Options'); return categories; }"
          setter-function: "customer -> customer.setPreferredCategories(categories)"
        validation-rules:
          - "preferredCategories != null"
          - "!preferredCategories.contains('Options')"
        audit-requirements:
          - "Log category addition"
          - "Track customer profile changes"
          
      add-futures-action:
        action-id: "ADD_FUTURES"
        action-name: "Add Futures Category"
        action-description: "Add Futures category to customer's preferred categories"
        target-field: "preferredCategories"
        operation: "add"
        value: "Futures"
        action-logic:
          extractor-function: "customer -> customer.getPreferredCategories()"
          modifier-function: "categories -> { if (!categories.contains('Futures')) categories.add('Futures'); return categories; }"
          setter-function: "customer -> customer.setPreferredCategories(categories)"
        validation-rules:
          - "preferredCategories != null"
          - "!preferredCategories.contains('Futures')"
        audit-requirements:
          - "Log category addition"
          - "Track customer profile changes"
    action-settings:
      execution-timeout: 2000
      parallel-execution: true
      error-handling: "continue-on-warning"
    
  category-removal-actions:
    action-type: "category-removal-actions"
    action-name: "Category Removal Actions"
    description: "Actions for removing product categories from customer profiles"
    action-parameters:
      operation-type: "removal"
      field-target: "preferredCategories"
      validation-required: true
    field-actions:
      remove-options-action:
        action-id: "REMOVE_OPTIONS"
        action-name: "Remove Options Category"
        action-description: "Remove Options category from customer's preferred categories"
        target-field: "preferredCategories"
        operation: "remove"
        value: "Options"
        action-logic:
          extractor-function: "customer -> customer.getPreferredCategories()"
          modifier-function: "categories -> { categories.remove('Options'); return categories; }"
          setter-function: "customer -> customer.setPreferredCategories(categories)"
        validation-rules:
          - "preferredCategories != null"
          - "preferredCategories.contains('Options')"
        audit-requirements:
          - "Log category removal"
          - "Track customer profile changes"
          
      remove-futures-action:
        action-id: "REMOVE_FUTURES"
        action-name: "Remove Futures Category"
        action-description: "Remove Futures category from customer's preferred categories"
        target-field: "preferredCategories"
        operation: "remove"
        value: "Futures"
        action-logic:
          extractor-function: "customer -> customer.getPreferredCategories()"
          modifier-function: "categories -> { categories.remove('Futures'); return categories; }"
          setter-function: "customer -> customer.setPreferredCategories(categories)"
        validation-rules:
          - "preferredCategories != null"
          - "preferredCategories.contains('Futures')"
        audit-requirements:
          - "Log category removal"
          - "Track customer profile changes"
          
      remove-high-risk-categories-action:
        action-id: "REMOVE_HIGH_RISK_CATEGORIES"
        action-name: "Remove High Risk Categories"
        action-description: "Remove all high-risk categories from customer's preferred categories"
        target-field: "preferredCategories"
        operation: "remove-multiple"
        values: ["Options", "Futures", "Commodities"]
        action-logic:
          extractor-function: "customer -> customer.getPreferredCategories()"
          modifier-function: "categories -> { categories.removeAll(Arrays.asList('Options', 'Futures', 'Commodities')); return categories; }"
          setter-function: "customer -> customer.setPreferredCategories(categories)"
        validation-rules:
          - "preferredCategories != null"
        audit-requirements:
          - "Log high-risk category removal"
          - "Track risk profile changes"
    action-settings:
      execution-timeout: 1500
      parallel-execution: true
      error-handling: "continue-on-warning"
    
  field-modification-actions:
    action-type: "field-modification-actions"
    action-name: "Field Modification Actions"
    description: "Actions for modifying customer profile fields"
    action-parameters:
      operation-type: "modification"
      validation-required: true
    field-actions:
      update-risk-profile-action:
        action-id: "UPDATE_RISK_PROFILE"
        action-name: "Update Risk Profile"
        action-description: "Update customer's risk profile based on age and behavior"
        target-field: "riskProfile"
        operation: "update"
        action-logic:
          condition: "#value.age >= 60 || #value.riskTolerance == 'LOW'"
          modifier-function: "customer -> { customer.setRiskProfile('CONSERVATIVE'); return customer; }"
        validation-rules:
          - "age != null || riskTolerance != null"
        audit-requirements:
          - "Log risk profile update"
          - "Track profile changes"
          
      update-investment-horizon-action:
        action-id: "UPDATE_INVESTMENT_HORIZON"
        action-name: "Update Investment Horizon"
        action-description: "Update customer's investment horizon based on age"
        target-field: "investmentHorizon"
        operation: "update"
        action-logic:
          condition: "#value.age < 35"
          modifier-function: "customer -> { customer.setInvestmentHorizon('LONG_TERM'); return customer; }"
        validation-rules:
          - "age != null"
        audit-requirements:
          - "Log investment horizon update"
          - "Track profile changes"
    action-settings:
      execution-timeout: 1000
      parallel-execution: false
      error-handling: "fail-on-error"
    
  conditional-actions:
    action-type: "conditional-actions"
    action-name: "Conditional Actions"
    description: "Actions that execute based on complex conditions"
    action-parameters:
      operation-type: "conditional"
      validation-required: true
    field-actions:
      premium-service-action:
        action-id: "PREMIUM_SERVICE"
        action-name: "Premium Service Assignment"
        action-description: "Assign premium service level for high-value customers"
        target-field: "serviceLevel"
        operation: "conditional-update"
        action-logic:
          condition: "#value.membershipLevel == 'Gold' && #value.portfolioValue > 1000000"
          modifier-function: "customer -> { customer.setServiceLevel('PREMIUM'); return customer; }"
        validation-rules:
          - "membershipLevel != null"
          - "portfolioValue != null"
        audit-requirements:
          - "Log premium service assignment"
          - "Track service level changes"
          
      wealth-management-action:
        action-id: "WEALTH_MANAGEMENT"
        action-name: "Wealth Management Assignment"
        action-description: "Assign wealth management services for ultra-high-net-worth customers"
        target-field: "serviceLevel"
        operation: "conditional-update"
        action-logic:
          condition: "#value.portfolioValue > 5000000"
          modifier-function: "customer -> { customer.setServiceLevel('WEALTH_MANAGEMENT'); return customer; }"
        validation-rules:
          - "portfolioValue != null"
          - "portfolioValue > 5000000"
        audit-requirements:
          - "Log wealth management assignment"
          - "Track high-value customer changes"
    action-settings:
      execution-timeout: 2500
      parallel-execution: false
      error-handling: "fail-on-error"
    
  default:
    action-type: "default"
    action-name: "Default Field Actions"
    description: "Default field action processing"
    field-actions:
      default-action:
        action-id: "DEFAULT_ACTION"
        action-name: "Default Action"
        operation: "no-op"
    action-settings:
      execution-timeout: 500

# Action execution patterns
execution-patterns:
  category-management-pattern:
    pattern-name: "Category Management Pattern"
    description: "Pattern for managing product category assignments"
    execution-order: ["addition", "removal", "validation"]
    
  profile-update-pattern:
    pattern-name: "Profile Update Pattern"
    description: "Pattern for updating customer profile fields"
    execution-order: ["risk-assessment", "service-assignment", "validation"]
    
  conditional-processing-pattern:
    pattern-name: "Conditional Processing Pattern"
    description: "Pattern for conditional action execution"
    execution-order: ["condition-evaluation", "action-execution", "validation"]

# Quality assurance
quality-assurance:
  action-accuracy:
    - "Field actions must be accurate and precise"
    - "Category management must be consistent"
    - "Profile updates must be appropriate"
    - "Conditional logic must be correct"
    
  performance-requirements:
    - "Action execution must be within timeout limits"
    - "Field operations must be efficient"
    - "Parallel execution must be thread-safe"
    - "Error handling must be comprehensive"
    
  data-integrity:
    - "Field modifications must maintain data integrity"
    - "Category assignments must be valid"
    - "Profile changes must be auditable"
    - "Validation rules must be enforced"
