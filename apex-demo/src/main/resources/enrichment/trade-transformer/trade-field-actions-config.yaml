# APEX Trade Field Actions Configuration
# External data source configuration for trade field actions processing
# Replaces hardcoded trade field transformer actions from TradeTransformerDemo

metadata:
  name: "Trade Field Actions Configuration"
  version: "1.0.0"
  description: "Data-driven trade field actions configuration for trade transformation processing"
  type: "external-data-config"
  author: "apex.demo.team@company.com"
  created-date: "2024-12-24"
  tags: ["apex-demo", "enrichment", "trade-field-actions", "external-data"]

# Trade field actions configuration by action type
data:
  category-setting-actions:
    action-type: "category-setting-actions"
    action-name: "Category Setting Actions"
    description: "Actions for setting trade categories"
    action-parameters:
      operation-type: "category-assignment"
      field-target: "category"
      validation-required: true
    field-actions:
      set-instrument-type-action:
        action-id: "SET_INSTRUMENT_TYPE"
        action-name: "Set Instrument Type Category"
        action-description: "Set category to InstrumentType for instrument-based trades"
        target-field: "category"
        operation: "set"
        value: "InstrumentType"
        action-logic:
          extractor-function: "trade -> trade.getCategory()"
          modifier-function: "category -> { if (category == null || category.isEmpty() || 'Uncategorized'.equals(category)) { return 'InstrumentType'; } else { return category; } }"
          setter-function: "trade -> trade.setCategory(category)"
        validation-rules:
          - "category != null || category.isEmpty() || 'Uncategorized'.equals(category)"
        audit-requirements:
          - "Log instrument type category assignment"
          - "Track trade categorization changes"
          
      set-priority-level-action:
        action-id: "SET_PRIORITY_LEVEL"
        action-name: "Set Priority Level Category"
        action-description: "Set category to PriorityLevel for priority-based trades"
        target-field: "category"
        operation: "set"
        value: "PriorityLevel"
        action-logic:
          extractor-function: "trade -> trade.getCategory()"
          modifier-function: "category -> { if (category == null || category.isEmpty() || 'Uncategorized'.equals(category)) { return 'PriorityLevel'; } else { return category; } }"
          setter-function: "trade -> trade.setCategory(category)"
        validation-rules:
          - "category != null || category.isEmpty() || 'Uncategorized'.equals(category)"
        audit-requirements:
          - "Log priority level category assignment"
          - "Track trade categorization changes"
          
      set-value-range-action:
        action-id: "SET_VALUE_RANGE"
        action-name: "Set Value Range Category"
        action-description: "Set category to ValueRange for value-based trades"
        target-field: "category"
        operation: "set"
        value: "ValueRange"
        action-logic:
          extractor-function: "trade -> trade.getCategory()"
          modifier-function: "category -> { if (category == null || category.isEmpty() || 'Uncategorized'.equals(category)) { return 'ValueRange'; } else { return category; } }"
          setter-function: "trade -> trade.setCategory(category)"
        validation-rules:
          - "category != null || category.isEmpty() || 'Uncategorized'.equals(category)"
        audit-requirements:
          - "Log value range category assignment"
          - "Track trade categorization changes"
          
      set-risk-category-action:
        action-id: "SET_RISK_CATEGORY"
        action-name: "Set Risk Category"
        action-description: "Set category to RiskCategory for risk-based trades"
        target-field: "category"
        operation: "set"
        value: "RiskCategory"
        action-logic:
          extractor-function: "trade -> trade.getCategory()"
          modifier-function: "category -> { if (category == null || category.isEmpty() || 'Uncategorized'.equals(category)) { return 'RiskCategory'; } else { return category; } }"
          setter-function: "trade -> trade.setCategory(category)"
        validation-rules:
          - "category != null || category.isEmpty() || 'Uncategorized'.equals(category)"
        audit-requirements:
          - "Log risk category assignment"
          - "Track trade categorization changes"
          
      set-default-category-action:
        action-id: "SET_DEFAULT_CATEGORY"
        action-name: "Set Default Category"
        action-description: "Set category to DefaultCategory for uncategorized trades"
        target-field: "category"
        operation: "set"
        value: "DefaultCategory"
        action-logic:
          extractor-function: "trade -> trade.getCategory()"
          modifier-function: "category -> { if (category == null || category.isEmpty() || 'Uncategorized'.equals(category)) { return 'DefaultCategory'; } else { return category; } }"
          setter-function: "trade -> trade.setCategory(category)"
        validation-rules:
          - "category != null || category.isEmpty() || 'Uncategorized'.equals(category)"
        audit-requirements:
          - "Log default category assignment"
          - "Track trade categorization changes"
    action-settings:
      execution-timeout: 2000
      parallel-execution: true
      error-handling: "continue-on-warning"
    
  value-setting-actions:
    action-type: "value-setting-actions"
    action-name: "Value Setting Actions"
    description: "Actions for setting trade values"
    action-parameters:
      operation-type: "value-assignment"
      field-target: "value"
      validation-required: true
    field-actions:
      set-high-priority-value-action:
        action-id: "SET_HIGH_PRIORITY_VALUE"
        action-name: "Set High Priority Value"
        action-description: "Set value to HighPriority for high priority trades"
        target-field: "value"
        operation: "set"
        value: "HighPriority"
        action-logic:
          extractor-function: "trade -> trade.getValue()"
          modifier-function: "value -> 'HighPriority'"
          setter-function: "trade -> trade.setValue(value)"
        validation-rules:
          - "id != null && id.startsWith('HP')"
        audit-requirements:
          - "Log high priority value assignment"
          - "Track priority value changes"
          
      set-urgent-priority-value-action:
        action-id: "SET_URGENT_PRIORITY_VALUE"
        action-name: "Set Urgent Priority Value"
        action-description: "Set value to UrgentPriority for urgent priority trades"
        target-field: "value"
        operation: "set"
        value: "UrgentPriority"
        action-logic:
          extractor-function: "trade -> trade.getValue()"
          modifier-function: "value -> 'UrgentPriority'"
          setter-function: "trade -> trade.setValue(value)"
        validation-rules:
          - "id != null && id.startsWith('UR')"
        audit-requirements:
          - "Log urgent priority value assignment"
          - "Track priority value changes"
          
      set-medium-priority-value-action:
        action-id: "SET_MEDIUM_PRIORITY_VALUE"
        action-name: "Set Medium Priority Value"
        action-description: "Set value to MediumPriority for medium priority trades"
        target-field: "value"
        operation: "set"
        value: "MediumPriority"
        action-logic:
          extractor-function: "trade -> trade.getValue()"
          modifier-function: "value -> 'MediumPriority'"
          setter-function: "trade -> trade.setValue(value)"
        validation-rules:
          - "id != null && id.startsWith('MP')"
        audit-requirements:
          - "Log medium priority value assignment"
          - "Track priority value changes"
          
      set-low-priority-value-action:
        action-id: "SET_LOW_PRIORITY_VALUE"
        action-name: "Set Low Priority Value"
        action-description: "Set value to LowPriority for low priority trades"
        target-field: "value"
        operation: "set"
        value: "LowPriority"
        action-logic:
          extractor-function: "trade -> trade.getValue()"
          modifier-function: "value -> 'LowPriority'"
          setter-function: "trade -> trade.setValue(value)"
        validation-rules:
          - "id != null && id.startsWith('LP')"
        audit-requirements:
          - "Log low priority value assignment"
          - "Track priority value changes"
          
      set-large-value-action:
        action-id: "SET_LARGE_VALUE"
        action-name: "Set Large Value"
        action-description: "Set value to LargeValue for large value trades"
        target-field: "value"
        operation: "set"
        value: "LargeValue"
        action-logic:
          extractor-function: "trade -> trade.getValue()"
          modifier-function: "value -> 'LargeValue'"
          setter-function: "trade -> trade.setValue(value)"
        validation-rules:
          - "tradeAmount != null && tradeAmount >= 1000000"
        audit-requirements:
          - "Log large value assignment"
          - "Track value-based changes"
          
      set-medium-value-action:
        action-id: "SET_MEDIUM_VALUE"
        action-name: "Set Medium Value"
        action-description: "Set value to MediumValue for medium value trades"
        target-field: "value"
        operation: "set"
        value: "MediumValue"
        action-logic:
          extractor-function: "trade -> trade.getValue()"
          modifier-function: "value -> 'MediumValue'"
          setter-function: "trade -> trade.setValue(value)"
        validation-rules:
          - "tradeAmount != null && tradeAmount >= 100000 && tradeAmount < 1000000"
        audit-requirements:
          - "Log medium value assignment"
          - "Track value-based changes"
          
      set-small-value-action:
        action-id: "SET_SMALL_VALUE"
        action-name: "Set Small Value"
        action-description: "Set value to SmallValue for small value trades"
        target-field: "value"
        operation: "set"
        value: "SmallValue"
        action-logic:
          extractor-function: "trade -> trade.getValue()"
          modifier-function: "value -> 'SmallValue'"
          setter-function: "trade -> trade.setValue(value)"
        validation-rules:
          - "tradeAmount != null && tradeAmount < 100000"
        audit-requirements:
          - "Log small value assignment"
          - "Track value-based changes"
    action-settings:
      execution-timeout: 1500
      parallel-execution: true
      error-handling: "continue-on-warning"
    
  priority-assignment-actions:
    action-type: "priority-assignment-actions"
    action-name: "Priority Assignment Actions"
    description: "Actions for assigning trade priorities"
    action-parameters:
      operation-type: "priority-assignment"
      field-target: "priority"
      validation-required: true
    field-actions:
      assign-urgent-priority-action:
        action-id: "ASSIGN_URGENT_PRIORITY"
        action-name: "Assign Urgent Priority"
        action-description: "Assign urgent priority to time-sensitive trades"
        target-field: "priority"
        operation: "set"
        value: "URGENT"
        action-logic:
          extractor-function: "trade -> trade.getPriority()"
          modifier-function: "priority -> 'URGENT'"
          setter-function: "trade -> trade.setPriority(priority)"
        validation-rules:
          - "id != null && (id.startsWith('UR') || tradeAmount >= 10000000)"
        audit-requirements:
          - "Log urgent priority assignment"
          - "Track priority escalation"
          
      assign-high-priority-action:
        action-id: "ASSIGN_HIGH_PRIORITY"
        action-name: "Assign High Priority"
        action-description: "Assign high priority to important trades"
        target-field: "priority"
        operation: "set"
        value: "HIGH"
        action-logic:
          extractor-function: "trade -> trade.getPriority()"
          modifier-function: "priority -> 'HIGH'"
          setter-function: "trade -> trade.setPriority(priority)"
        validation-rules:
          - "id != null && (id.startsWith('HP') || tradeAmount >= 1000000)"
        audit-requirements:
          - "Log high priority assignment"
          - "Track priority assignment"
          
      assign-medium-priority-action:
        action-id: "ASSIGN_MEDIUM_PRIORITY"
        action-name: "Assign Medium Priority"
        action-description: "Assign medium priority to standard trades"
        target-field: "priority"
        operation: "set"
        value: "MEDIUM"
        action-logic:
          extractor-function: "trade -> trade.getPriority()"
          modifier-function: "priority -> 'MEDIUM'"
          setter-function: "trade -> trade.setPriority(priority)"
        validation-rules:
          - "id != null && (id.startsWith('MP') || (tradeAmount >= 100000 && tradeAmount < 1000000))"
        audit-requirements:
          - "Log medium priority assignment"
          - "Track standard priority assignment"
          
      assign-low-priority-action:
        action-id: "ASSIGN_LOW_PRIORITY"
        action-name: "Assign Low Priority"
        action-description: "Assign low priority to routine trades"
        target-field: "priority"
        operation: "set"
        value: "LOW"
        action-logic:
          extractor-function: "trade -> trade.getPriority()"
          modifier-function: "priority -> 'LOW'"
          setter-function: "trade -> trade.setPriority(priority)"
        validation-rules:
          - "id != null && (id.startsWith('LP') || tradeAmount < 100000)"
        audit-requirements:
          - "Log low priority assignment"
          - "Track routine priority assignment"
    action-settings:
      execution-timeout: 1000
      parallel-execution: true
      error-handling: "continue-on-warning"
    
  risk-rating-actions:
    action-type: "risk-rating-actions"
    action-name: "Risk Rating Actions"
    description: "Actions for assigning trade risk ratings"
    action-parameters:
      operation-type: "risk-assignment"
      field-target: "riskRating"
      validation-required: true
    field-actions:
      assign-high-risk-action:
        action-id: "ASSIGN_HIGH_RISK"
        action-name: "Assign High Risk Rating"
        action-description: "Assign high risk rating to volatile trades"
        target-field: "riskRating"
        operation: "set"
        value: "HIGH_RISK"
        action-logic:
          extractor-function: "trade -> trade.getRiskRating()"
          modifier-function: "riskRating -> 'HIGH_RISK'"
          setter-function: "trade -> trade.setRiskRating(riskRating)"
        validation-rules:
          - "value == 'Equity' || value == 'Commodity' || tradeAmount >= 5000000"
        audit-requirements:
          - "Log high risk rating assignment"
          - "Track risk assessment"
          
      assign-medium-risk-action:
        action-id: "ASSIGN_MEDIUM_RISK"
        action-name: "Assign Medium Risk Rating"
        action-description: "Assign medium risk rating to balanced trades"
        target-field: "riskRating"
        operation: "set"
        value: "MEDIUM_RISK"
        action-logic:
          extractor-function: "trade -> trade.getRiskRating()"
          modifier-function: "riskRating -> 'MEDIUM_RISK'"
          setter-function: "trade -> trade.setRiskRating(riskRating)"
        validation-rules:
          - "value == 'ETF' || (tradeAmount >= 100000 && tradeAmount < 5000000)"
        audit-requirements:
          - "Log medium risk rating assignment"
          - "Track balanced risk assessment"
          
      assign-low-risk-action:
        action-id: "ASSIGN_LOW_RISK"
        action-name: "Assign Low Risk Rating"
        action-description: "Assign low risk rating to conservative trades"
        target-field: "riskRating"
        operation: "set"
        value: "LOW_RISK"
        action-logic:
          extractor-function: "trade -> trade.getRiskRating()"
          modifier-function: "riskRating -> 'LOW_RISK'"
          setter-function: "trade -> trade.setRiskRating(riskRating)"
        validation-rules:
          - "value == 'Bond' || tradeAmount < 100000"
        audit-requirements:
          - "Log low risk rating assignment"
          - "Track conservative risk assessment"
    action-settings:
      execution-timeout: 1200
      parallel-execution: true
      error-handling: "continue-on-warning"
    
  default:
    action-type: "default"
    action-name: "Default Trade Field Actions"
    description: "Default trade field action processing"
    field-actions:
      default-action:
        action-id: "DEFAULT_ACTION"
        action-name: "Default Action"
        operation: "no-op"
    action-settings:
      execution-timeout: 500

# Action execution patterns
execution-patterns:
  category-assignment-pattern:
    pattern-name: "Category Assignment Pattern"
    description: "Pattern for assigning trade categories"
    execution-order: ["instrument-type", "priority-level", "value-range", "risk-category"]
    
  value-assignment-pattern:
    pattern-name: "Value Assignment Pattern"
    description: "Pattern for assigning trade values"
    execution-order: ["priority-values", "size-values", "risk-values"]
    
  priority-assignment-pattern:
    pattern-name: "Priority Assignment Pattern"
    description: "Pattern for assigning trade priorities"
    execution-order: ["urgent", "high", "medium", "low"]

# Quality assurance
quality-assurance:
  action-accuracy:
    - "Field actions must be accurate and precise"
    - "Category assignments must be consistent"
    - "Value assignments must be appropriate"
    - "Priority assignments must be correct"
    
  performance-requirements:
    - "Action execution must be within timeout limits"
    - "Field operations must be efficient"
    - "Parallel execution must be thread-safe"
    - "Error handling must be comprehensive"
    
  data-integrity:
    - "Field modifications must maintain data integrity"
    - "Category assignments must be valid"
    - "Value changes must be auditable"
    - "Priority assignments must be enforced"
