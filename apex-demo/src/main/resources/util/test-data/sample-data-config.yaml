# APEX Sample Data Configuration
# External data source configuration for sample data creation
# Replaces hardcoded sample data creation from TestUtilities

metadata:
  name: "Sample Data Configuration"
  version: "1.0.0"
  description: "Data-driven sample data configuration for test utilities"
  type: "external-data-config"
  author: "apex.demo.team@company.com"
  created-date: "2024-12-24"
  tags: ["apex-demo", "util", "test-data", "sample-data"]

# Sample data configuration by data type
data:
  sample-customers:
    data-id: "DATA001"
    data-type: "sample-customers"
    description: "Sample customer data for testing"
    sample-records:
      - customer-id: "CUST001"
        name: "John Smith"
        age: 35
        email: "john.smith@example.com"
        membership-level: "Premium"
        balance: 50000.0
        customer-type: "premium-customer"
        
      - customer-id: "CUST002"
        name: "Jane Doe"
        age: 28
        email: "jane.doe@example.com"
        membership-level: "Silver"
        balance: 75000.0
        customer-type: "standard-customer"
        
      - customer-id: "CUST003"
        name: "Bob Johnson"
        age: 45
        email: "bob.johnson@example.com"
        membership-level: "Gold"
        balance: 120000.0
        customer-type: "gold-customer"
        
      - customer-id: "CUST004"
        name: "Alice Brown"
        age: 32
        email: "alice.brown@example.com"
        membership-level: "Basic"
        balance: 85000.0
        customer-type: "basic-customer"
        
      - customer-id: "CUST005"
        name: "Charlie Wilson"
        age: 17
        email: "charlie.wilson@example.com"
        membership-level: "Basic"
        balance: 5000.0
        customer-type: "young-customer"
    generation-rules:
      - "Customer names must be realistic"
      - "Ages must be between 16 and 80"
      - "Email addresses must be valid format"
      - "Membership levels must be valid"
      - "Balances must be non-negative"
    
  sample-products:
    data-id: "DATA002"
    data-type: "sample-products"
    description: "Sample product data for testing"
    sample-records:
      - product-id: "PROD001"
        name: "Premium Savings Account"
        price: 1000.00
        category: "SAVINGS"
        product-type: "savings-account"
        
      - product-id: "PROD002"
        name: "Business Checking Account"
        price: 5000.00
        category: "CHECKING"
        product-type: "checking-account"
        
      - product-id: "PROD003"
        name: "Investment Portfolio"
        price: 25000.00
        category: "INVESTMENT"
        product-type: "investment-product"
        
      - product-id: "PROD004"
        name: "Student Loan"
        price: 500.00
        category: "LOAN"
        product-type: "loan-product"
        
      - product-id: "PROD005"
        name: "Credit Card"
        price: 0.00
        category: "CREDIT"
        product-type: "credit-product"
    generation-rules:
      - "Product names must be descriptive"
      - "Prices must be non-negative"
      - "Categories must be valid"
      - "Product IDs must be unique"
    
  sample-trades:
    data-id: "DATA003"
    data-type: "sample-trades"
    description: "Sample trade data for testing"
    sample-records:
      - trade-id: "TRD001"
        amount: "10000.00"
        type: "EQUITY"
        trade-type: "equity-trade"
        
      - trade-id: "TRD002"
        amount: "25000.00"
        type: "BOND"
        trade-type: "bond-trade"
        
      - trade-id: "TRD003"
        amount: "5000.00"
        type: "OPTION"
        trade-type: "option-trade"
        
      - trade-id: "TRD004"
        amount: "15000.00"
        type: "FUTURE"
        trade-type: "future-trade"
        
      - trade-id: "TRD005"
        amount: "50000.00"
        type: "SWAP"
        trade-type: "swap-trade"
    generation-rules:
      - "Trade IDs must be unique"
      - "Amounts must be positive"
      - "Types must be valid instrument types"
      - "Trade data must be complete"
    
  sample-financial-trades:
    data-id: "DATA004"
    data-type: "sample-financial-trades"
    description: "Sample financial trade data for testing"
    sample-records:
      - trade-id: "FT001"
        amount: 15000.00
        currency: "USD"
        counterparty: "GOLDMAN_SACHS"
        trade-type: "financial-trade"
        
      - trade-id: "FT002"
        amount: 22000.00
        currency: "EUR"
        counterparty: "JPMORGAN"
        trade-type: "financial-trade"
        
      - trade-id: "FT003"
        amount: 8500.00
        currency: "GBP"
        counterparty: "MORGAN_STANLEY"
        trade-type: "financial-trade"
        
      - trade-id: "FT004"
        amount: 35000.00
        currency: "USD"
        counterparty: "CITIGROUP"
        trade-type: "financial-trade"
        
      - trade-id: "FT005"
        amount: 12000.00
        currency: "JPY"
        counterparty: "BARCLAYS"
        trade-type: "financial-trade"
    generation-rules:
      - "Trade IDs must be unique"
      - "Amounts must be positive"
      - "Currencies must be valid ISO codes"
      - "Counterparties must be recognized institutions"
    
  sample-commodity-swaps:
    data-id: "DATA005"
    data-type: "sample-commodity-swaps"
    description: "Sample commodity swap data for testing"
    sample-records:
      - swap-id: "SWAP001"
        counterparty: "GOLDMAN_SACHS"
        client-id: "CLIENT001"
        underlying-commodity: "CRUDE_OIL"
        notional-amount: 1000000.00
        swap-type: "commodity-swap"
        
      - swap-id: "SWAP002"
        counterparty: "JPMORGAN"
        client-id: "CLIENT002"
        underlying-commodity: "NATURAL_GAS"
        notional-amount: 750000.00
        swap-type: "commodity-swap"
        
      - swap-id: "SWAP003"
        counterparty: "MORGAN_STANLEY"
        client-id: "CLIENT003"
        underlying-commodity: "GOLD"
        notional-amount: 500000.00
        swap-type: "commodity-swap"
        
      - swap-id: "SWAP004"
        counterparty: "CITIGROUP"
        client-id: "CLIENT004"
        underlying-commodity: "SILVER"
        notional-amount: 300000.00
        swap-type: "commodity-swap"
        
      - swap-id: "SWAP005"
        counterparty: "BARCLAYS"
        client-id: "CLIENT005"
        underlying-commodity: "COPPER"
        notional-amount: 400000.00
        swap-type: "commodity-swap"
    generation-rules:
      - "Swap IDs must be unique"
      - "Counterparties must be valid institutions"
      - "Client IDs must be valid"
      - "Underlying commodities must be recognized"
      - "Notional amounts must be positive"
    
  default:
    data-id: "DATA000"
    data-type: "default"
    description: "Default sample data"
    sample-records:
      - record-id: "DEFAULT001"
        name: "Default Record"
        value: "Default Value"
        type: "default"
    generation-rules:
      - "Basic data validation"

# Data generation patterns
generation-patterns:
  customer-generation:
    pattern-name: "Customer Data Generation"
    description: "Pattern for generating customer sample data"
    base-template: "sample-customers"
    variable-fields:
      - "name"
      - "age"
      - "email"
      - "membership-level"
      - "balance"
    generation-constraints:
      - "Age must be between 16 and 80"
      - "Email must be valid format"
      - "Balance must be non-negative"
      - "Membership level must be valid"
    
  product-generation:
    pattern-name: "Product Data Generation"
    description: "Pattern for generating product sample data"
    base-template: "sample-products"
    variable-fields:
      - "name"
      - "price"
      - "category"
    generation-constraints:
      - "Price must be non-negative"
      - "Category must be valid"
      - "Name must be descriptive"
    
  trade-generation:
    pattern-name: "Trade Data Generation"
    description: "Pattern for generating trade sample data"
    base-template: "sample-trades"
    variable-fields:
      - "trade-id"
      - "amount"
      - "type"
    generation-constraints:
      - "Trade ID must be unique"
      - "Amount must be positive"
      - "Type must be valid instrument type"

# Sample data validation
validation-rules:
  customer-validation:
    - "Customer name must not be empty"
    - "Age must be positive integer"
    - "Email must contain @ symbol"
    - "Membership level must be recognized"
    - "Balance must be numeric"
    
  product-validation:
    - "Product name must not be empty"
    - "Price must be non-negative number"
    - "Category must be valid"
    - "Product ID must be unique"
    
  trade-validation:
    - "Trade ID must not be empty"
    - "Amount must be positive number"
    - "Type must be valid"
    - "All required fields must be present"

# Performance optimization
performance-optimization:
  data-caching:
    cache-strategy: "LRU"
    cache-size: 500
    cache-ttl: 1800
    cache-key-strategy: "data-type-hash"
    
  generation-optimization:
    parallel-generation: true
    batch-size: 100
    generation-timeout: 3000
    memory-efficient: true
