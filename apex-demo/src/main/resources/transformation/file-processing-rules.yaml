metadata:
  id: "File Processing Rules Configuration"
  name: "File Processing Rules Configuration"
  version: "1.0.0"
  description: "Comprehensive file processing pipeline using APEX Rules Engine for customer data validation and enrichment"
  type: "rule-config"
  author: "apex.demo.team@company.com"
  created-date: "2024-12-24"
  tags: ["apex-demo", "transformation", "file-processing"]

# ============================================================================
# APEX Rules Engine - File Processing Configuration
# ============================================================================
#
# This YAML configuration demonstrates a comprehensive file processing pipeline
# using the APEX Rules Engine for customer data validation and enrichment.
#
# OVERVIEW:
# This configuration processes customer data files (JSON/XML) through a
# multi-stage pipeline that validates data integrity, enriches records with
# calculated fields and lookup data, and produces enhanced output files.
#
# PROCESSING PIPELINE:
# 1. VALIDATION STAGE - Validates incoming customer data for:
#    - Required fields (ID, name, email)
#    - Data format validation (email format, age ranges)
#    - Business rules (account balance, status, country support)
#    - Data quality checks with configurable severity levels
#
# 2. ENRICHMENT STAGE - Enhances customer records with:
#    - Customer tier calculation (Bronze/Silver/Gold/Platinum)
#    - Discount rate calculation based on age and tier
#    - Country information lookup (currency, timezone, tax rates)
#    - Credit limit calculation using multiple factors
#    - Risk assessment scoring and categorization
#
# 3. OUTPUT STAGE - Produces enriched customer data with:
#    - Original data preserved
#    - Calculated fields added
#    - Validation results included
#    - Processing reports generated
#
# CONFIGURATION STRUCTURE:
# - metadata: Configuration information and versioning
# - rules: Validation rules with severity levels and priorities
# - enrichments: Data enhancement rules with calculations and lookups
# - ruleGroups: Organized rule execution with logical operators
# - processing: Pipeline configuration and file handling settings
#
# USAGE EXAMPLES:
# This configuration is used by:
# - FileProcessingDemo.java - Demonstrates file processing capabilities
# - YamlDatasetDemo.java - Shows YAML-driven rule configuration
# - Batch processing scenarios for customer data imports
# - Data quality validation in ETL pipelines
#
# BUSINESS VALUE:
# - Ensures data quality and consistency across customer records
# - Automates customer segmentation and tier assignment
# - Provides risk assessment for compliance and business decisions
# - Enriches data with contextual information for better analytics
# - Supports multiple file formats with configurable processing options
#
# TECHNICAL FEATURES:
# - SpEL (Spring Expression Language) for flexible rule conditions
# - Inline lookup datasets for reference data
# - Configurable severity levels (ERROR, WARNING, INFO)
# - Rule prioritization for execution order
# - Conditional enrichment based on data availability
# - Batch processing with configurable sizes and limits
#
# ============================================================================

# ============================================================================
# VALIDATION RULES SECTION
# ============================================================================
#
# These rules validate incoming customer data for completeness, format, and
# business rule compliance. Rules are executed in priority order with
# configurable severity levels:
#
# SEVERITY LEVELS:
# - ERROR: Critical validation failures that prevent processing
# - WARNING: Data quality issues that should be reviewed
# - INFO: Informational checks for business insights
#
# RULE CATEGORIES:
# - validation: Data format and completeness checks
# - business-rule: Business logic and policy enforcement
# - required-fields: Essential data presence validation
# - financial: Account and balance related validations
# - geography: Location and country-specific rules
#
# Each rule includes:
# - id: Unique identifier for the rule
# - name: Human-readable rule description
# - condition: SpEL expression that evaluates to true/false
# - message: Error message displayed when rule fails
# - severity: Impact level of rule failure
# - priority: Execution order (lower numbers execute first)
# - categories: Tags for rule organization and filtering
#
rules:
  - id: "required-fields-validation"
    name: "Required Fields Validation"
    condition: "#customerId != null && #firstName != null && #lastName != null && #email != null"
    message: "Customer must have ID, first name, last name, and email"
    severity: "ERROR"
    priority: 1
    categories: ["validation", "required-fields"]
    
  - id: "age-validation"
    name: "Age Validation"
    condition: "#age != null && #age >= 18 && #age <= 120"
    message: "Customer age must be between 18 and 120"
    severity: "ERROR"
    priority: 2
    categories: ["validation", "age"]
    
  - id: "email-format-validation"
    name: "Email Format Validation"
    condition: "#email != null && #email.contains('@') && #email.contains('.') && #email.length() >= 5"
    message: "Email must be in valid format"
    severity: "ERROR"
    priority: 3
    categories: ["validation", "email"]
    
  - id: "account-balance-validation"
    name: "Account Balance Validation"
    condition: "#accountBalance != null && #accountBalance >= 0"
    message: "Account balance must be non-negative"
    severity: "ERROR"
    priority: 4
    categories: ["validation", "financial"]
    
  - id: "status-validation"
    name: "Status Validation"
    condition: "#status != null && (#status == 'ACTIVE' || #status == 'PENDING' || #status == 'INACTIVE')"
    message: "Customer status must be ACTIVE, PENDING, or INACTIVE"
    severity: "WARNING"
    priority: 5
    categories: ["validation", "status"]
    
  - id: "country-validation"
    name: "Country Validation"
    condition: "#country != null && (#country == 'US' || #country == 'CA' || #country == 'GB' || #country == 'DE' || #country == 'FR')"
    message: "Customer country must be supported (US, CA, GB, DE, FR)"
    severity: "WARNING"
    priority: 6
    categories: ["validation", "geography"]
    
  - id: "minimum-balance-check"
    name: "Minimum Balance Check"
    condition: "#accountBalance >= 1000"
    message: "Account balance should be at least $1000 for premium services"
    severity: "INFO"
    priority: 7
    categories: ["business-rule", "financial"]

# ============================================================================
# ENRICHMENT RULES SECTION
# ============================================================================
#
# These rules enhance customer records by adding calculated fields, lookup data,
# and derived business insights. Enrichments are applied after validation and
# only when specified conditions are met.
#
# ENRICHMENT TYPES:
# - calculation-enrichment: Adds computed fields using SpEL expressions
# - lookup-enrichment: Adds reference data from inline or external datasets
#
# ENRICHMENT FEATURES:
# - Conditional execution based on data availability
# - Multiple field calculations per enrichment rule
# - Inline lookup datasets with key-field matching
# - Field mapping from lookup data to target fields
# - Complex business logic using nested conditional expressions
#
# BUSINESS ENRICHMENTS PROVIDED:
# 1. Customer Tier Assignment - Segments customers based on account balance
# 2. Discount Rate Calculation - Computes personalized discount rates
# 3. Country Information Lookup - Adds currency, timezone, tax rate data
# 4. Credit Limit Calculation - Determines credit limits using multiple factors
# 5. Risk Assessment Scoring - Evaluates customer risk for compliance
#
# Each enrichment includes:
# - id: Unique identifier for the enrichment rule
# - type: Type of enrichment (calculation or lookup)
# - name: Human-readable enrichment description
# - condition: SpEL expression determining when to apply enrichment
# - calculations: List of field calculations (for calculation-enrichment)
# - lookup-config: Lookup dataset and mapping configuration (for lookup-enrichment)
#
enrichments:
  # Customer Tier Enrichment
  - id: "customer-tier-enrichment"
    type: "calculation-enrichment"
    name: "Customer Tier Calculation"
    condition: "#accountBalance != null"
    calculation-config:
      expression: "#accountBalance >= 50000 ? 'PLATINUM' : (#accountBalance >= 25000 ? 'GOLD' : (#accountBalance >= 10000 ? 'SILVER' : 'BRONZE'))"
      result-field: "customerTier"
      dependencies: ["accountBalance"]
    field-mappings:
      - source-field: "customerTier"
        target-field: "customerTier"
        required: true

  # Discount Rate Enrichment
  - id: "discount-rate-enrichment"
    type: "calculation-enrichment"
    name: "Discount Rate Calculation"
    condition: "#age != null && #customerTier != null"
    calculation-config:
      expression: |
        (#age >= 30 ? 0.15 : (#age >= 21 ? 0.10 : 0.05)) +
        (#customerTier == 'PLATINUM' ? 0.10 : (#customerTier == 'GOLD' ? 0.05 : (#customerTier == 'SILVER' ? 0.02 : 0.0)))
      result-field: "finalDiscountRate"
      dependencies: ["age", "customerTier"]
    field-mappings:
      - source-field: "finalDiscountRate"
        target-field: "finalDiscountRate"
        required: true

  # Country Information Enrichment
  - id: "country-info-enrichment"
    type: "lookup-enrichment"
    name: "Country Information Lookup"
    condition: "#country != null"
    lookup-config:
      lookup-key: "country"
      lookup-dataset:
        type: "inline"
        key-field: "countryCode"
        data:
          - countryCode: "US"
            countryName: "United States"
            currency: "USD"
            timezone: "EST"
            taxRate: 0.25
            region: "North America"
            language: "English"
          - countryCode: "CA"
            countryName: "Canada"
            currency: "CAD"
            timezone: "EST"
            taxRate: 0.28
            region: "North America"
            language: "English"
          - countryCode: "GB"
            countryName: "United Kingdom"
            currency: "GBP"
            timezone: "GMT"
            taxRate: 0.20
            region: "Europe"
            language: "English"
          - countryCode: "DE"
            countryName: "Germany"
            currency: "EUR"
            timezone: "CET"
            taxRate: 0.30
            region: "Europe"
            language: "German"
          - countryCode: "FR"
            countryName: "France"
            currency: "EUR"
            timezone: "CET"
            taxRate: 0.32
            region: "Europe"
            language: "French"
    field-mappings:
      - source-field: "countryName"
        target-field: "countryName"
      - source-field: "currency"
        target-field: "currency"
      - source-field: "timezone"
        target-field: "timezone"
      - source-field: "taxRate"
        target-field: "taxRate"
      - source-field: "region"
        target-field: "region"
      - source-field: "language"
        target-field: "primaryLanguage"

  # Credit Limit Enrichment
  - id: "credit-limit-enrichment"
    type: "calculation-enrichment"
    name: "Credit Limit Calculation"
    condition: "#accountBalance != null && #age != null && #customerTier != null"
    calculation-config:
      expression: |
        #accountBalance *
        (#age >= 40 ? 3.0 : (#age >= 30 ? 2.5 : 2.0)) *
        (#customerTier == 'PLATINUM' ? 1.5 : (#customerTier == 'GOLD' ? 1.3 : (#customerTier == 'SILVER' ? 1.1 : 1.0)))
      result-field: "creditLimit"
      dependencies: ["accountBalance", "age", "customerTier"]
    field-mappings:
      - source-field: "creditLimit"
        target-field: "creditLimit"
        required: true

  # Risk Assessment Enrichment
  - id: "risk-assessment-enrichment"
    type: "calculation-enrichment"
    name: "Risk Assessment Calculation"
    condition: "#age != null && #accountBalance != null"
    calculation-config:
      expression: |
        (#age >= 40 ? 10 : (#age >= 30 ? 20 : 30)) +
        (#accountBalance >= 50000 ? 5 : (#accountBalance >= 25000 ? 15 : (#accountBalance >= 10000 ? 25 : 35)))
      result-field: "totalRiskScore"
      dependencies: ["age", "accountBalance"]
    field-mappings:
      - source-field: "totalRiskScore"
        target-field: "totalRiskScore"
        required: true

# ============================================================================
# RULE GROUPS SECTION
# ============================================================================
#
# Rule groups organize related validation rules for logical execution and
# provide control over how multiple rules are evaluated together.
#
# GROUP OPERATORS:
# - AND: All rules in the group must pass for the group to pass
# - OR: At least one rule in the group must pass for the group to pass
#
# BUSINESS GROUPINGS:
# - basic-validation-group: Essential data integrity checks
# - business-validation-group: Business policy and rule enforcement
#
# Benefits of rule groups:
# - Logical organization of related validation rules
# - Conditional execution based on group results
# - Simplified reporting and error handling
# - Ability to skip entire rule categories based on business logic
#
ruleGroups:
  - id: "basic-validation-group"
    name: "Basic Validation Rules"
    description: "Essential validation rules that must pass"
    operator: "AND"
    rules:
      - "required-fields-validation"
      - "age-validation"
      - "email-format-validation"
      - "account-balance-validation"
    
  - id: "business-validation-group"
    name: "Business Validation Rules"
    description: "Business-specific validation rules"
    operator: "AND"
    rules:
      - "status-validation"
      - "country-validation"
      - "minimum-balance-check"

# ============================================================================
# PROCESSING CONFIGURATION SECTION
# ============================================================================
#
# This section configures the overall processing behavior and file handling
# settings for the customer data processing pipeline.
#
# PROCESSING CONTROL:
# - stopOnFirstError: Whether to halt processing on first validation failure
# - enableEnrichment: Whether to apply enrichment rules to valid records
# - enableValidation: Whether to apply validation rules to incoming data
# - logLevel: Logging verbosity (DEBUG, INFO, WARN, ERROR)
#
# FILE PROCESSING SETTINGS:
# - batchSize: Number of records to process in each batch (memory optimization)
# - maxFileSize: Maximum allowed input file size (prevents resource exhaustion)
# - supportedFormats: List of supported input file formats
# - outputFormat: Format for processed output files
# - generateReport: Whether to create processing summary reports
#
# PERFORMANCE CONSIDERATIONS:
# - Batch processing reduces memory usage for large files
# - File size limits prevent system resource exhaustion
# - Configurable logging levels for production vs development
# - Report generation provides processing insights and audit trails
#
# PRODUCTION RECOMMENDATIONS:
# - Set stopOnFirstError: false for batch processing scenarios
# - Use appropriate batchSize based on available memory
# - Enable report generation for audit and monitoring
# - Set logLevel to INFO or WARN for production environments
#
processing:
  stopOnFirstError: false
  enableEnrichment: true
  enableValidation: true
  logLevel: "INFO"
  
  # File processing specific settings
  fileProcessing:
    batchSize: 100
    maxFileSize: "10MB"
    supportedFormats: ["json", "xml"]
    outputFormat: "json"
    generateReport: true
