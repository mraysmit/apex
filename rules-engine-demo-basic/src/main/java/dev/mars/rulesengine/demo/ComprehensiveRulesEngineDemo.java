package dev.mars.rulesengine.demo;

import dev.mars.rulesengine.demo.examples.financial.CommoditySwapValidationDemo;
import dev.mars.rulesengine.demo.showcase.PerformanceAndExceptionShowcase;
import dev.mars.rulesengine.demo.simplified.SimplifiedAPIDemo;

import java.util.Scanner;

/**
 * Comprehensive demonstration of the SpEL Rules Engine capabilities.
 * 
 * This is the main entry point for the reorganized rules-engine-demo module,
 * showcasing the new layered APIs design and comprehensive examples including:
 * 
 * 1. Financial instrument validation and enrichment (OTC Commodity Total Return Swaps)
 * 2. New layered APIs (Ultra-Simple, Template-Based, Advanced Configuration)
 * 3. Performance monitoring and exception handling
 * 4. Static data validation and enrichment
 * 5. Real-world use cases for trade capture and post-trade processing
 * 
 * The demo is organized into logical sections that can be run independently
 * or as a complete showcase of the rules engine capabilities.
 */
public class ComprehensiveRulesEngineDemo {
    
    private static final String BANNER = """
            ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
            ‚ïë                        SpEL Rules Engine Demo Suite                          ‚ïë
            ‚ïë                     Comprehensive Financial Examples                         ‚ïë
            ‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
            ‚ïë  Demonstrating new layered APIs with real-world financial use cases          ‚ïë
            ‚ïë  ‚Ä¢ OTC Commodity Total Return Swap validation & enrichment                   ‚ïë
            ‚ïë  ‚Ä¢ Static data integration and validation                                    ‚ïë
            ‚ïë  ‚Ä¢ Performance monitoring and exception handling                             ‚ïë
            ‚ïë  ‚Ä¢ Trade capture and post-trade lifecycle processing                         ‚ïë
            ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
            """;
    
    private static final String MENU = """
            
            ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
            ‚îÇ                              DEMO MENU                                      ‚îÇ
            ‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
            ‚îÇ  1. üè¶ Financial Instrument Validation (Commodity Swaps)                    ‚îÇ
            ‚îÇ  2. üöÄ Simplified APIs Demonstration                                        ‚îÇ
            ‚îÇ  3. ‚ö° Performance & Exception Handling Showcase                             ‚îÇ
            ‚îÇ  4. üîÑ Complete End-to-End Demo                                             ‚îÇ
            ‚îÇ  5. üìä Static Data Validation Examples                                      ‚îÇ
            ‚îÇ  6. üéØ Quick Start Guide                                                    ‚îÇ
            ‚îÇ  0. üö™ Exit                                                                  ‚îÇ
            ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ ‚îò
            
            Enter your choice (0-6): """;
    
    public static void main(String[] args) {
        System.out.println(BANNER);
        
        // Check if running in non-interactive mode (e.g., automated tests)
        if (args.length > 0) {
            runNonInteractiveDemo(args[0]);
            return;
        }
        
        // Interactive mode
        runInteractiveDemo();
    }
    
    /**
     * Run the demo in interactive mode with user menu selection.
     */
    private static void runInteractiveDemo() {
        Scanner scanner = new Scanner(System.in);
        boolean running = true;
        
        while (running) {
            System.out.print(MENU);
            
            try {
                int choice = Integer.parseInt(scanner.nextLine().trim());
                
                switch (choice) {
                    case 1 -> runFinancialInstrumentDemo();
                    case 2 -> runSimplifiedAPIDemo();
                    case 3 -> runPerformanceShowcase();
                    case 4 -> runCompleteDemo();
                    case 5 -> runStaticDataDemo();
                    case 6 -> runQuickStartGuide();
                    case 0 -> {
                        System.out.println("\nüëã Thank you for exploring the SpEL Rules Engine!");
                        System.out.println("Visit our documentation for more examples and advanced features.");
                        running = false;
                    }
                    default -> System.out.println("\n‚ùå Invalid choice. Please select 0-6.");
                }
                
                if (running && choice != 0) {
                    System.out.println("\n" + "‚îÄ".repeat(80));
                    System.out.print("Press Enter to return to menu...");
                    scanner.nextLine();
                }
                
            } catch (NumberFormatException e) {
                System.out.println("\n‚ùå Please enter a valid number (0-6).");
            }
        }
        
        scanner.close();
    }
    
    /**
     * Run the demo in non-interactive mode for automated testing.
     */
    private static void runNonInteractiveDemo(String demoType) {
        System.out.println("Running in non-interactive mode: " + demoType);
        
        switch (demoType.toLowerCase()) {
            case "financial" -> runFinancialInstrumentDemo();
            case "simplified" -> runSimplifiedAPIDemo();
            case "performance" -> runPerformanceShowcase();
            case "complete" -> runCompleteDemo();
            case "static" -> runStaticDataDemo();
            case "quickstart" -> runQuickStartGuide();
            default -> {
                System.out.println("Unknown demo type: " + demoType);
                System.out.println("Available types: financial, simplified, performance, complete, static, quickstart");
            }
        }
    }
    
    /**
     * Run the financial instrument validation demo.
     */
    private static void runFinancialInstrumentDemo() {
        printSectionHeader("Financial Instrument Validation Demo", 
                          "OTC Commodity Total Return Swap validation and enrichment");
        
        try {
            CommoditySwapValidationDemo.main(new String[]{});
        } catch (Exception e) {
            System.err.println("Error running financial demo: " + e.getMessage());
            e.printStackTrace();
        }
    }
    
    /**
     * Run the simplified APIs demonstration.
     */
    private static void runSimplifiedAPIDemo() {
        printSectionHeader("Simplified APIs Demonstration", 
                          "Ultra-simple, template-based, and advanced configuration APIs");
        
        try {
            SimplifiedAPIDemo.main(new String[]{});
        } catch (Exception e) {
            System.err.println("Error running simplified API demo: " + e.getMessage());
            e.printStackTrace();
        }
    }
    
    /**
     * Run the performance and exception handling showcase.
     */
    private static void runPerformanceShowcase() {
        printSectionHeader("Performance & Exception Handling Showcase", 
                          "Monitoring, metrics, concurrent execution, and error recovery");
        
        try {
            PerformanceAndExceptionShowcase.main(new String[]{});
        } catch (Exception e) {
            System.err.println("Error running performance showcase: " + e.getMessage());
            e.printStackTrace();
        }
    }
    
    /**
     * Run the complete end-to-end demonstration.
     */
    private static void runCompleteDemo() {
        printSectionHeader("Complete End-to-End Demo", 
                          "Full demonstration of all features and capabilities");
        
        System.out.println("üîÑ Running complete demonstration suite...\n");
        
        // Run all demos in sequence
        runFinancialInstrumentDemo();
        System.out.println("\n" + "‚ïê".repeat(80) + "\n");
        
        runSimplifiedAPIDemo();
        System.out.println("\n" + "‚ïê".repeat(80) + "\n");
        
        runPerformanceShowcase();
        System.out.println("\n" + "‚ïê".repeat(80) + "\n");
        
        runStaticDataDemo();
        
        System.out.println("\nüéâ Complete demonstration finished!");
        System.out.println("All features have been showcased successfully.");
    }
    
    /**
     * Run static data validation examples.
     */
    private static void runStaticDataDemo() {
        printSectionHeader("Static Data Validation Examples", 
                          "Client, counterparty, currency, and commodity reference data");
        
        System.out.println("üìä Static Data Validation Examples:");
        System.out.println();
        
        // This would run specific static data examples
        System.out.println("1. Client Data Validation:");
        System.out.println("   ‚úì Client existence and status checks");
        System.out.println("   ‚úì Regulatory classification validation");
        System.out.println("   ‚úì Credit limit and risk rating checks");
        
        System.out.println("\n2. Account Data Validation:");
        System.out.println("   ‚úì Account ownership verification");
        System.out.println("   ‚úì Account status and limits validation");
        System.out.println("   ‚úì Authorized instrument checks");
        
        System.out.println("\n3. Counterparty Data Validation:");
        System.out.println("   ‚úì Counterparty authorization status");
        System.out.println("   ‚úì Credit rating and limit validation");
        System.out.println("   ‚úì LEI (Legal Entity Identifier) verification");
        
        System.out.println("\n4. Reference Data Validation:");
        System.out.println("   ‚úì Currency validity and trading status");
        System.out.println("   ‚úì Commodity reference index validation");
        System.out.println("   ‚úì Market data provider verification");
        
        System.out.println("\n‚úÖ Static data validation examples completed!");
    }
    
    /**
     * Run the quick start guide.
     */
    private static void runQuickStartGuide() {
        printSectionHeader("Quick Start Guide", 
                          "Get started with the SpEL Rules Engine in 5 minutes");
        
        System.out.println("""
                üöÄ Quick Start Guide - SpEL Rules Engine
                
                ‚îå‚îÄ Step 1: Ultra-Simple API (30 seconds) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
                ‚îÇ                                                                         ‚îÇ
                ‚îÇ  // One-liner rule evaluation                                          ‚îÇ
                ‚îÇ  boolean isValid = Rules.check("#age >= 18", Map.of("age", 25));       ‚îÇ
                ‚îÇ                                                                         ‚îÇ
                ‚îÇ  // Named rules for reuse                                              ‚îÇ
                ‚îÇ  Rules.define("adult", "#age >= 18");                                  ‚îÇ
                ‚îÇ  boolean result = Rules.test("adult", customer);                       ‚îÇ
                ‚îÇ                                                                         ‚îÇ
                ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
                
                ‚îå‚îÄ Step 2: Template-Based Rules (2 minutes) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
                ‚îÇ                                                                         ‚îÇ
                ‚îÇ  // Validation rule set                                                ‚îÇ
                ‚îÇ  RulesEngine validation = RuleSet.validation()                         ‚îÇ
                ‚îÇ      .ageCheck(18)                                                     ‚îÇ
                ‚îÇ      .emailRequired()                                                  ‚îÇ
                ‚îÇ      .phoneRequired()                                                  ‚îÇ
                ‚îÇ      .build();                                                         ‚îÇ
                ‚îÇ                                                                         ‚îÇ
                ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
                
                ‚îå‚îÄ Step 3: Financial Use Case (2 minutes) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
                ‚îÇ                                                                         ‚îÇ
                ‚îÇ  // Commodity swap validation                                          ‚îÇ
                ‚îÇ  boolean validSwap = Rules.check(                                      ‚îÇ
                ‚îÇ      "#notionalAmount > 1000000 && #currency == 'USD'",               ‚îÇ
                ‚îÇ      Map.of("notionalAmount", swap.getNotional(),                      ‚îÇ
                ‚îÇ             "currency", swap.getCurrency()));                          ‚îÇ
                ‚îÇ                                                                         ‚îÇ
                ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
                
                üìö Next Steps:
                ‚Ä¢ Explore the financial instrument examples (Option 1)
                ‚Ä¢ Try the performance monitoring features (Option 3)
                ‚Ä¢ Review the complete API documentation
                
                üí° Pro Tips:
                ‚Ä¢ Use simple expressions for better performance
                ‚Ä¢ Leverage static data validation for enrichment
                ‚Ä¢ Enable performance monitoring in production
                ‚Ä¢ Cache frequently used rules for optimal speed
                """);
    }
    
    /**
     * Print a formatted section header.
     */
    private static void printSectionHeader(String title, String description) {
        System.out.println("\n" + "‚ïê".repeat(80));
        System.out.println("üéØ " + title.toUpperCase());
        System.out.println("   " + description);
        System.out.println("‚ïê".repeat(80));
        System.out.println();
    }
}
